% Encoding: UTF-8
%%%%% Books %%%%%

@Book{Cin17c,
  author    = {Davide Cingolani},
  publisher = {EAI - Edizioni Accademiche Italiane},
  title     = {Software Reversibility in Speculative Platforms: A reversible computing approach to state recovery},
  year      = {2017},
  isbn      = {978-3-330-77780-4},
  month     = jan,
}

@BOOK{Pell14e,
	author = {Pellegrini, Alessandro},
	title = {Parallelization of Discrete Event Simulation Models},
	publisher = {Sapienza Università Editrice},
	year = {2015},
	month = nov,
	series = {Studi e Ricerche},
	isbn = {978-88-98533-59-6},
}

@book{Cio02,
	title={Logic Network Design},
	author={Cioffi, Giacomo and Ciciani, Bruno},
	year={2002},
	publisher={Mc. Graw Hill}
}

@book{Cic95b,
	title={Manufacturing yield evaluation of VLSI/WSI systems},
	author={Ciciani, Bruno},
	year={1995},
	publisher={IEEE Computer Society}
}

@book{Cio94,
	title={Microprogramming and Microprocessors},
	author={Cioffi, Giacomo and Ciciani, Bruno and Congiu, S.},
	year={1994},
	publisher={Ingegneria 2000}
}

@book{Cic93,
	title={Architettura del Processore PD32},
	author={Ciciani, Bruno},
	year={1993},
	publisher={CUD}
}

@book{Cic86,
	title={Logic Network Projects},
	author={Ciciani, Bruno and Pugnaloni, Andrea},
	year={1986},
	publisher={Siderea}
}


%%%%% Books Chapters %%%%%

@INCOLLECTION{Rug15,
	author={Rughetti, Diego and Di Sanzo, Pierangelo and Pellegrini, Alessandro and Ciciani, Bruno and Quaglia, Francesco},
	title={Tuning the Level of Concurrency in Software Transactional Memory: An Overview of Recent Analytical, Machine Learning and Mixed Approaches},
	editor={Guerraoui, Rachid and Romano, Paolo},
	year={2015},
	isbn={978-3-319-14719-2},
	publisher={Springer International Publishing},
	booktitle={Transactional Memory. Foundations, Algorithms, Tools, and Applications},
	volume={8913},
	series={Lecture Notes in Computer Science},
	doi={10.1007/978-3-319-14720-8_18},
	pages={395--417}
}

@INCOLLECTION{Qua14,
	author = {Quaglia, Francesco and Pellegrini, Alessandro and Vitali, Roberto},
	title = {Reshuffling {PDES} Platforms for Multi/Many-core Machines: a Perspective with focus on Load Sharing},
	editor = {Gianni, Daniele and D'Ambrogio, Andrea and Tolk, Andreas},
	booktitle = {Modeling and Simulation-based Systems Engineering Handbook},
	publisher = {Crc Pr I Llc},
	doi = {10.1201/b17902-10},
	isbn = {978-1-4665-7145-7},
	year = {2014},
	month = dec
}

@INCOLLECTION{Barr14,
	author = {Barreto, João and Di Sanzo, Pierangelo and Palmieri, Roberto and Romano, Paolo},
	year = {2014},
	month = {01},
	pages = {749-781},
	title = {Cloud-TM: An elastic, self-tuning transactional store for the cloud},
	volume = {2},
	booktitle = {Data Intensive Storage Services for Cloud Environments}
}

@incollection{Chi98,
	title={A Fault-Robust SPMD Architecture for 3D-TV Image Processing},
	author={Chiari, Armando and Ciciani, Bruno and Romero, Milton},
	booktitle={Fault-Tolerant Parallel and Distributed Systems},
	pages={231--245},
	year={1998},
	publisher={Springer}
}

@incollection{Qua98b,
	title={A checkpointing-recovery scheme for domino-free distributed systems},
	author={Quaglia, Francesco and Ciciani, Bruno and Baldoni, Roberto},
	booktitle={Fault-Tolerant Parallel and Distributed Systems},
	pages={93--107},
	year={1998},
	publisher={Springer}
}

@incollection{Cic93,
	author = {Ciciani, Bruno and de Nitto Personè, V. and Iazeolla, G and Marinuzzi, F.},
	title = {LISPACK/SIMCOR a parallel tool for the performance evaluation of massively parallel computer architectures},
	publisher = {National Research Council},
	year = {1993},
	pages = {235--246}
}

@incollection{Cic92,
	title={Yield Evaluation of Tree Dynamic RAM},
	author={Ciciani, Bruno},
	booktitle={Hardware and Software Fault Tolerance in Parallel Computing Systems},
	pages={169--184},
	year={1992},
	publisher={Ellis Horwood Limited}
}

@incollection{Cic87,
	title = {Yield and Performability Evaluation of VLSI Reconfigurable Multiprocessor Structures.},
	author = {Ciciani, Bruno and Grassi, Vincenzo and Iazeolla, Giuseppe},
	booktitle = {Computer Performance and Reliability},
	pages = {369--382},
	year = {1987}
}




%%%%% Journal Articles %%%%%

@Article{Pri20,
  author    = {Principe, Matteo and Tocci, Tommaso and Di Sanzo, Pierangelo and Quaglia, Francesco and Pellegrini, Alessandro},
  journal   = {ACM Transactions on Modeling and Computer Simulation},
  title     = {A Distributed Shared-Memory Middleware for Speculative Parallel Discrete Event Simulation},
  year      = {2020},
  issn      = {1049-3301},
  month     = {3},
  abstract  = {The large diffusion of multi-core machines has pushed the research in the field of Parallel Discrete Event Simulation (PDES) towards new programming paradigms, based on the exploitation of shared memory. On the opposite side, the advent of Cloud computing—and the possibility to group together many (low-cost) virtual machines to form a distributed-memory cluster capable of hosting simulation applications—has raised the need to bridge shared-memory programming and seamless distributed execution. In this article, we present the design of a distributed middleware that transparently allows a PDES application coded for shared memory systems to run on clusters of (Cloud) resources. Our middleware is based on a synchronization protocol called Event & Cross State (ECS) Synchronization. It allows cross-simulation-object access by event handlers, thus representing a powerful tool for the development of various types of PDES applications. We also provide data for an experimental assessment of our middleware architecture, which has been integrated into the open source ROOT-Sim speculative PDES platform.},
  doi       = {10.1145/3373335},
  publisher = {ACM},
  series    = {TOMACS},
}

@Article{DiS19,
  author    = {Di Sanzo, Pierangelo and Pellegrini, Alessandro and Sannicandro, Marco and Ciciani, Bruno and Quaglia, Francesco},
  journal   = {IEEE Transactions on Computers},
  title     = {Adaptive Model-based Scheduling in Software Transactional Memory},
  year      = {2019},
  issn      = {0018-9340},
  month     = {12},
  abstract  = {Software Transactional Memory (STM) stands as powerful concurrent programming paradigm, enabling atomicity and isolation while accessing shared data. On the downside, STM may suffer from performance degradation due to excessive conflicts among concurrent transactions, which cause waste of CPU-cycles and energy because of transaction aborts. An approach to cope with this issue consists of putting in place smart scheduling strategies which temporarily suspend the execution of some transaction in order to reduce the transaction conflict rate. In this article, we present an adaptive model-based transaction scheduling technique relying on a Markov Chain-based performance model of STM systems. Our scheduling technique is adaptive in a twofold sense: (i) it controls the execution of transactions depending on throughput predictions by the model as a function of the current system state, (ii) it re-tunes on-line the Markov Chain-based model to adapt it—and the outcoming transaction scheduling decisions—to dynamic variations of the workload. We have been able to achieve the latter target thanks to the fact that our performance model is extremely lightweight. In fact, to be recomputed, it requires a reduced set of input parameters, whose values can be estimated via a few on-line samples related to the current workload dynamics. We also present a scheduler that implements our adaptive technique, which we integrated within the open source TinySTM package. Further, we report the results of an experimental study based on the STAMP benchmark suite, which has been aimed at assessing both the accuracy of our performance model in predicting the actual system throughput and the advantages of the adaptive scheduling policy over literature techniques},
  doi       = {10.1109/TC.2019.2954139},
  publisher = {IEEE},
  series    = {TC},
}

@Article{Pell19,
  author    = {Pellegrini, Alessandro and Quaglia, Francesco},
  journal   = {Journal of Parallel and Distributed Computing},
  title     = {Cross-State Events: a New Approach to Parallel Discrete Event Simulation and its Speculative Runtime Support},
  year      = {2019},
  issn      = {0743-7315},
  month     = {10},
  pages     = {48--68},
  volume    = {132},
  abstract  = {We present a new approach to Parallel Discrete Event Simulation (PDES), where we enable the execution of so-called cross-state events. During their processing, the state of multiple concurrent simulation objects can be accessed in read/write mode, as opposed to classical partitioned accesses. This is done with no pre-declaration of this type of access by the programmer, hence also coping with non-determinism. In our proposal, cross-state events are supported by a speculative runtime environment fully transparently to the application code. This is done through an ad-hoc memory management architecture and an extension of the classical Time Warp synchronization protocol. This extension, named Event and Cross-State (ECS) synchronization, ensures causally-consistent speculative parallel execution of discrete event applications by allowing all events to observe the snapshot of the model execution trajectory that would have been observed in a timestamp-ordered execution of the same model. An experimental assessment of our proposal shows how it can significantly reduce the application development complexity, while also providing advantages in terms of performance},
  doi       = {10.1016/j.jpdc.2019.05.003},
  publisher = {Elsevier},
  series    = {JPDC},
}

@Article{Ian18c,
  author    = {Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
  journal   = {IEEE Transactions on Parallel and Distributed Systems},
  title     = {Anonymous Readers Counting: A Wait-free Multi-word Atomic Register Algorithm for Scalable Data Sharing on Multi-core Machines},
  year      = {2019},
  issn      = {1045-9219},
  month     = {2},
  pages     = {286--299},
  volume    = {30},
  abstract  = {In this article we present Anonymous Readers Counting (ARC), a multi-word atomic (1,N) register algorithm for multi-core machines. ARC exploits Read-Modify-Write (RMW) instructions to coordinate the writer and reader threads in a wait-free manner and enables large-scale data sharing by admitting up to ($2^{32} - 2$) concurrent readers on off-the-shelf 64-bits machines, as opposed to the most advanced RMW-based approach which is limited to 58 readers on the same kind of machines. Further, ARC avoids multiple copies of the register content when accessing it—this is a problem that affects classical register algorithms based on atomic read/write operations on single words. Thus it allows for higher scalability with respect to the register size. Moreover, ARC explicitly reduces the overall energy consumption, via a proper limitation of RMW instructions in case of read operations re-accessing a still-valid snapshot of the register content, and by showing constant time for read operations and amortized constant time for write operations. Our proposal has therefore a strong focus on real-world off-the-shelf architectures, allowing us to capture properties which benefit both performance and energy consumption. A proof of correctness of our register algorithm is also provided, together with experimental data for a comparison with literature proposals. Beyond assessing ARC on physical platforms, we carry out as well an experimentation on virtualized infrastructures, which shows the resilience of wait-free synchronization as provided by ARC with respect to CPU-steal times, proper of modern paradigms such as cloud computing. Finally, we discuss how to extend ARC for scenarios with multiple writers and multiple readers—the so called (M,N) register. This is achieved not by changing the operations (and their wait-free nature) executed along the critical path of the threads, rather only changing the ratio between the number of buffers keeping the register snapshots and the number of threads to coordinate, as well as the number of bits used for counting readers within a 64-bit mask accessed via RMW instructions—just depending on the target balance between the number of readers and the number of writers to be supported.},
  doi       = {10.1109/TPDS.2018.2865932},
  publisher = {IEEE},
  series    = {TPDS},
}

@Article{Rug17,
  author   = {Diego Rughetti and Pierangelo Di Sanzo and Bruno Ciciani and Francesco Quaglia},
  journal  = {Journal of Parallel and Distributed Computing},
  title    = {Machine learning-based thread-parallelism regulation in software transactional memory},
  year     = {2017},
  issn     = {0743-7315},
  pages    = {208 - 229},
  volume   = {109},
  doi      = {10.1016/j.jpdc.2017.06.001},
  keywords = {dependable},
  url      = {http://www.sciencedirect.com/science/article/pii/S0743731517301909},
}

@article{DiS17,
	doi = {10.1109/tpds.2017.2740285},
	url = {https://doi.org/10.1109%2Ftpds.2017.2740285},
	year = 2017,
	month = {dec},
	publisher = {Institute of Electrical and Electronics Engineers ({IEEE})},
	volume = {28},
	number = {12},
	pages = {3356--3373},
	author = {Pierangelo Di Sanzo},
	title = {Analysis, Classification and Comparison of Scheduling Techniques for Software Transactional Memories},
	journal = {{IEEE} Transactions on Parallel and Distributed Systems}
}

@ARTICLE{Cin17b,
	author = {Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Transparently Mixing Undo Logs and Software Reversibility for State Recovery in Optimistic PDES},
	journal = {ACM Transactions on Modeling and Computer Simulation},
	series = {TOMACS},
	volume = {27},
	number = {2},
	year = {2017},
	month = may,
	issn = {0885-7458},
	doi = {10.1145/3077583},
	publisher = {ACM Press},
}

@ARTICLE{Pell17b,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Fine-grain Time-sharing Time Warp System},
	journal = {ACM Transactions on Modeling and Computer Simulation},
	series = {TOMACS},
	volume = {27},
	number = {2},
	year = {2017},
	month = may,
	issn = {0885-7458},
	doi = {10.1145/3013528},
	publisher = {ACM Press},
}

@ARTICLE{Pell16b,
	author = {Pellegrini, Alessandro and Peluso, Sebastiano and Quaglia, Francesco and Vitali, Roberto},
	title = {Transparent Speculative Parallelization of Discrete Event Simulation Applications Using Global Variables},
	journal = {International Journal of Parallel Programming},
	series = {IJPP},
	volume = {44},
	number = {6},
	year = {2016},
	month = dec,
	issn = {0885-7458},
	pages = {1200--1247},
	doi = {10.1007/s10766-016-0429-2},
	publisher = {Springer Verlag},
}

@article{Pelu16,
	title = {GMU: Genuine Multiversion Update-Serializable Partial Data Replication},
	author = {Peluso, Sebastiano and Ruivo, Pedro and Romano, Paolo and Quaglia, Francesco and Rodrigues, Luis},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	volume = {27},
	number = {10},
	pages = {2911--2925},
	year = {2016},
	publisher = {IEEE}
}

@article{Qua15,
	title = {A low-overhead constant-time lowest-timestamp-first CPU scheduler for high-performance optimistic simulation platforms},
	author = {Quaglia, Francesco},
	journal = {Simulation Modelling Practice and Theory},
	volume = {53},
	pages = {103--122},
	year = {2015},
	publisher = {Elsevier}
}

@ARTICLE{DiS15,
	author = {Di Sanzo, Pierangelo and Quaglia, Francesco and Ciciani, Bruno and Pellegrini, Alessandro and Didona, Diego and Romano, Paolo and Palmieri, Roberto and Peluso, Sebastiano},
	title = {A Flexible Framework for Accurate Simulation of Cloud In-Memory Data Stores},
	journal = {Simulation Modelling Practice and Theory},
	series = {SIMPAT},
	volume = {58},
	number = {2},
	year = {2015},
	month = jul,
	issn = {1569-190X},
	pages = {219--238},
	doi = {10.1016/j.simpat.2015.05.011},
	publisher = {Elsevier},
}

@ARTICLE{Pell14d,
	author = {Pellegrini, Alessandro and Vitali, Roberto and Quaglia, Francesco},
	title = {Autonomic State Management for Optimistic Simulation Platforms},
	journal = {IEEE Transactions on Parallel and Distributed Systems},
	series = {TPDS},
	volume = {26},
	number = {6},
	year = {2015},
	month = jun,
	issn = {1045-9219},
	pages = {1560--1569},
	doi = {10.1109/TPDS.2014.2323967},
	publisher = {IEEE Computer Society},
}

@article{Did14,
	title = {Transactional auto scaler: Elastic scaling of replicated in-memory transactional data grids},
	author = {Didona, Diego and Romano, Paolo and Peluso, Sebastiano and Quaglia, Francesco},
	journal = {ACM Transactions on Autonomous and Adaptive Systems (TAAS)},
	volume = {9},
	number = {2},
	pages = {11},
	year = {2014},
	publisher = {ACM}
}

@article{Rom14,
	title = {On speculative replication of transactional systems},
	author = {Romano, Paolo and Palmieri, Roberto and Quaglia, Francesco and Carvalho, Nuno and Rodrigues, Luis},
	journal = {Journal of Computer and System Sciences},
	volume = {80},
	number = {1},
	pages = {257--276},
	year = {2014},
	publisher = {Elsevier}
}

@article{Rom14b,
	title = {Design and evaluation of a parallel invocation protocol for transactional applications over the web},
	author = {Romano, Paolo and Quaglia, Francesco},
	journal = {IEEE Transactions on Computers},
	volume = {63},
	number = {2},
	pages = {317--334},
	year = {2014},
	publisher = {IEEE}
}

@ARTICLE{Vit12e,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Load sharing for optimistic parallel simulations on multi core machines},
	journal = {SIGMETRICS Performance Evaluation Review},
	series = {PER},
	issue_date = {December 2012},
	volume = {40},
	number = {3},
	year = {2012},
	month = aug,
	issn = {0163-5999},
	pages = {2--11},
	numpages = {10},
	doi = {10.1145/2425248.2425250},
	publisher = {ACM}
}

@article{DiS12,
	title = {On the analytical modeling of concurrency control algorithms for software transactional memories: The case of commit-time-locking},
	author = {Di Sanzo, Pierangelo and Ciciani, Bruno and Palmieri, Roberto and Quaglia, Francesco and Romano, Paolo},
	journal = {Performance Evaluation},
	volume = {69},
	number = {5},
	pages = {187--205},
	year = {2012},
	publisher = {Elsevier}
}

@article{San12,
	title={Transparent optimistic synchronization in the high-level architecture via time-management conversion},
	author={Santoro, Andrea and Quaglia, Francesco},
	journal={ACM Transactions on Modeling and Computer Simulation (TOMACS)},
	volume={22},
	number={4},
	pages={21},
	year={2012},
	publisher={ACM}
}

@article{Pelu12,
	title={Supports for transparent object-migration in PDES systems},
	author={Peluso, Sebastiano and Didona, Diego and Quaglia, Francesco},
	journal={Journal of Simulation},
	volume={6},
	number={4},
	pages={279--293},
	year={2012},
	publisher={Springer}
}

@article{Rom11,
	title={Providing e-transaction guarantees in asynchronous systems with no assumptions on the accuracy of failure detection},
	author={Romano, Paolo and Quaglia, Francesco},
	journal={IEEE Transactions on Dependable and Secure Computing},
	volume={8},
	number={1},
	pages={104--121},
	year={2011},
	publisher={IEEE}
}

@article{Rom10,
	title={Cloud-TM: harnessing the cloud with distributed transactional memories},
	author={Romano, Paolo and Rodrigues, Luis and Carvalho, Nuno and Cachopo, Jo{\"a}o},
	journal={ACM SIGOPS Operating Systems Review},
	volume={44},
	number={2},
	pages={1--6},
	year={2010},
	publisher={ACM}
}

@article{Qua09,
	title={On the construction of committed consistent global states in optimistic simulation},
	author={Quaglia, Francesco},
	journal={International Journal of Simulation and Process Modelling},
	volume={5},
	number={2},
	pages={172--181},
	year={2009},
	publisher={Inderscience Publishers}
}

@article{Rom09,
	title={Accuracy versus efficiency of hyper-exponential approximations of the response time distribution of MMPP/M/1 queues},
	author={Romano, Paolo and Ciciani, Bruno and Santoro, Andrea and Quaglia, Francesco},
	journal={International Journal of Parallel, Emergent and Distributed Systems},
	volume={24},
	number={2},
	pages={107--125},
	year={2009},
	publisher={Taylor \& Francis}
}

@article{Qua07,
	title = {Software diversity-based active replication as an approach for enhancing the performance of advanced simulation systems},
	author = {Quaglia, Francesco},
	journal = {International Journal of Foundations of Computer Science},
	volume = {18},
	number = {03},
	pages = {495--515},
	year = {2007},
	publisher = {World Scientific}
}

@article{San07,
	title={Multiprogrammed non-blocking checkpoints in support of optimistic simulation on myrinet clusters},
	author={Santoro, Andrea and Quaglia, Francesco},
	journal={Journal of Systems Architecture},
	volume={53},
	number={9},
	pages={659--676},
	year={2007},
	publisher={Elsevier}
}

@article{Qua07b,
	title={Ensuring e-Transaction with asynchronous and uncoordinated application server replicas},
	author={Quaglia, Francesco and Romano, Paolo},
	journal={IEEE Transactions on Parallel and Distributed Systems},
	volume={18},
	number={3},
	year={2007},
	publisher={IEEE}
}

@article{Ped07,
	title={PELCR: parallel environment for optimal lambda-calculus reduction},
	author={Pedicini, Marco and Quaglia, Francesco},
	journal={ACM Transactions on Computational Logic (TOCL)},
	volume={8},
	number={3},
	pages={14},
	year={2007},
	publisher={ACM}
}

@article{San06,
	title={Transparent state management for optimistic synchronization in the High Level Architecture},
	author={Santoro, Andrea and Quaglia, Francesco},
	journal={Simulation},
	volume={82},
	number={1},
	pages={5--20},
	year={2006},
	publisher={Sage Publications Sage CA: Thousand Oaks, CA}
}

@article{Cos06,
	title={Supporting function calls within PELCR},
	author={Cosentino, Antonio and Pedicini, Marco and Quaglia, Francesco},
	journal={Electronic Notes in Theoretical Computer Science},
	volume={135},
	number={3},
	pages={107--117},
	year={2006},
	publisher={Elsevier}
}

@article{San06b,
	title={Software supports for event preemptive rollback in optimistic parallel simulation on myrinet clusters},
	author={Santoro, Andrea and Quaglia, Francesco},
	journal={Journal of Interconnection Networks},
	volume={6},
	number={04},
	pages={435--457},
	year={2005},
	publisher={World Scientific}
}

@article{Rom05,
	title={A lightweight and scalable e-Transaction protocol for three-tier systems with centralized back-end database},
	author={Romano, Paolo and Quaglia, Francesco and Ciciani, Bruno},
	journal={IEEE Transactions on Knowledge and Data Engineering},
	volume={17},
	number={11},
	pages={1578--1583},
	year={2005},
	publisher={IEEE}
}

@ARTICLE{Qua05,
	title = {Modeling and Optimization of Nonblocking Checkpointing for Optimistic Simulation on Myrinet Clusters},
	author = {Quaglia, Francesco and Santoro, Andrea},
	journal = {Journal Parallel and Distributed Computing},
	pages = {667--677},
	volume = {65},
	issue = {6},
	year = {2005},
}

@article{Qua03,
	title={Nonblocking checkpointing for optimistic parallel simulation: Description and an implementation},
	author={Quaglia, Francesco and Santoro, Andrea},
	journal={IEEE Transactions on Parallel and Distributed systems},
	volume={14},
	number={6},
	pages={593--610},
	year={2003},
	publisher={IEEE}
}

@article{Qua02,
	title={On the processor scheduling problem in time warp synchronization},
	author={Quaglia, Francesco and Cortellessa, Vittorio},
	journal={ACM Transactions on Modeling and Computer Simulation (TOMACS)},
	volume={12},
	number={3},
	pages={143--175},
	year={2002},
	publisher={ACM}
}

@article{Qua02b,
	title={A restriction of the elastic time algorithm},
	author={Quaglia, Francesco},
	journal={Information processing letters},
	volume={83},
	number={5},
	pages={243--249},
	year={2002},
	publisher={Elsevier}
}

@article{Qua02c,
	title={Performance analysis of adaptive wormhole routing in a two-dimensional torus},
	author={Quaglia, Francesco and Ciciani, Bruno and Colajanni, Michele},
	journal={Parallel Computing},
	volume={28},
	number={3},
	pages={485--501},
	year={2002},
	publisher={Elsevier}
}

@article{Bal01,
	title={Consistent checkpointing for transaction systems},
	author={Baldoni, Roberto and Quaglia, Francesco and Raynal, Michel},
	journal={The Computer Journal},
	volume={44},
	number={2},
	pages={92--100},
	year={2001},
	publisher={Oxford University Press}
}

@article{Qua01,
	title={A cost model for selecting checkpoint positions in Time Warp parallel simulation},
	author={Quaglia, Francesco},
	journal={IEEE Transactions on Parallel and Distributed Systems},
	volume={12},
	number={4},
	pages={346--362},
	year={2001},
	publisher={IEEE}
}

@article{Cor01,
	title={A checkpointing--recovery scheme for Time Warp parallel simulation},
	author={Cortellessa, Vittorio and Quaglia, Francesco},
	journal={Parallel Computing},
	volume={27},
	number={9},
	pages={1227--1252},
	year={2001},
	publisher={Elsevier}
}

@article{Qua00,
	title={On the no-z-cycle property in distributed executions},
	author={Quaglia, Francesco and Baldoni, Roberto and Ciciani, Bruno},
	journal={Journal of Computer and System Sciences},
	volume={61},
	number={3},
	pages={400--427},
	year={2000},
	publisher={Elsevier}
}

@article{Qua99,
	title={Trade-off between sequential and time warp-based parallel simulation},
	author={Quaglia, Francesco and Cortellessa, Vittorio and Ciciani, Bruno},
	journal={IEEE Transactions on Parallel and Distributed Systems},
	volume={10},
	number={8},
	pages={781--794},
	year={1999},
	publisher={IEEE}
}

@article{Qua99b,
	title={Exploiting intra-object dependencies in parallel simulation},
	author={Quaglia, Francesco and Baldoni, Roberto},
	journal={Information Processing Letters},
	volume={70},
	number={3},
	pages={119--125},
	year={1999},
	publisher={Elsevier}
}

@article{Qua99c,
	title={Performance vs. cost of redundant arrays of inexpensive disks},
	author={Quaglia, Francesco and Ciciani, Bruno},
	journal={Simulation Practice and Theory},
	volume={7},
	number={2},
	pages={153--170},
	year={1999},
	publisher={Elsevier}
}

@article{Bal99,
	title={An index-based checkpointing algorithm for autonomous distributed systems},
	author={Baldoni, Roberto and Quaglia, Francesco and Fornara, Paolo},
	journal={IEEE Transactions on Parallel and Distributed Systems},
	volume={10},
	number={2},
	pages={181--192},
	year={1999},
	publisher={IEEE}
}

@ARTICLE{Bat98,
	title = {Realistic Yield Evaluations of Fault Tolerant PLA's},
	author = {Battaglini, G. and Ciciani, B.},
	journal = {IEEE Transactions on Reliability},
	volume={23},
	issue={1},
	pages = {15--33},
	year = {1998},
	publisher = {IEEE}
}

@article{Qua98b,
	title={Multidatabase global concurrency control algorithms: a performance analysis},
	author={Quaglia, F and Baldoni, R and Ciciani, B},
	journal={Foundations of Computing and Decision Sciences},
	volume={23},
	number={1},
	pages={15--33},
	year={1998}
}

@ARTICLE{Qua98,
	title = {Checkpointing protocols in distributed systems with mobile hosts: A performance analysis},
	author = {Quaglia, Francesco and Ciciani, Bruno and Baldoni, Roberto},
	journal = {Parallel and Distributed Processing},
	pages = {742--755},
	year = {1998},
	publisher = {Springer}
}

@article{Cic98,
	title={Performance evaluation of deterministic wormhole routing in k-ary n-cubes},
	author={Ciciani, Bruno and Colajanni, Michele and Paolucci, Claudio},
	journal={Parallel Computing},
	volume={24},
	number={14},
	pages={2053--2075},
	year={1998},
	publisher={Elsevier}
}

@article{Aur98,
	title={Run-time selection of the checkpoint interval in time warp based simulations},
	author={Auriche, Laurent RG and Quaglia, Francesco and Ciciani, Bruno},
	journal={Simulation Practice and Theory},
	volume={6},
	number={5},
	pages={461--478},
	year={1998},
	publisher={Elsevier}
}

@article{Col98,
	title={Performance analysis of circuit-switching interconnection networks with deterministic and adaptive routing},
	author={Colajanni, Michele and Ciciani, Bruno and Tucci, Salvatore},
	journal={Performance Evaluation},
	volume={34},
	number={1},
	pages={1--26},
	year={1998},
	publisher={Elsevier}
}

@article{Col98b,
	title={Performance evaluation of message passing strategies and routing policies in multicomputers},
	author={Colajanni, Michele and Dell'Arte, A and Ciciani, Bruno},
	journal={Simulation Practice and Theory},
	volume={6},
	number={4},
	pages={369--385},
	year={1998},
	publisher={Elsevier}
}

@article{Cic95,
	title={On modelling of an adaptive routing algorithm for massively parallel processing systems},
	author={Ciciani, Bruno and Tucci, Salvatore},
	journal={Simulation Practice and Theory},
	volume={2},
	number={6},
	pages={237--255},
	year={1995},
	publisher={Elsevier}
}

@article{Bal95,
	title={A class of high performance Maekawa-type algorithms for distributed systems under heavy demand},
	author={Baldoni, Roberto and Ciciani, Bruno},
	journal={Distributed computing},
	volume={8},
	number={4},
	pages={171--180},
	year={1995},
	publisher={Springer}
}

@article{Bal95b,
	title={On the Correctness of Goscinski′ s Algorithm},
	author={Baldoni, Roberto and Ciciani, Bruno and Cioffi, Giacomo},
	journal={Journal of Parallel and Distributed Computing},
	volume={27},
	number={2},
	pages={201--204},
	year={1995},
	publisher={Elsevier}
}

@article{Bal94,
	title={Distributed algorithms for multiple entries to a critical section with priority},
	author={Baldoni, Roberto and Ciciani, Bruno},
	journal={Information Processing Letters},
	volume={50},
	number={3},
	pages={165--172},
	year={1994},
	publisher={Elsevier}
}

@article{Cic92c,
	title={Analysis of concurrency-coherency control protocols for distributed transaction processing systems with regional locality},
	author={Ciciani, Bruno and Dias, Daniel M. and Yu, Philip S.},
	journal={IEEE Transactions on Software Engineering},
	volume={18},
	number={10},
	pages={899--914},
	year={1992},
	publisher={IEEE}
}

@ARTICLE{Cic92b,
	title = {Performance Analysis of Hypercube Interconnection Network},
	author = {Ciciani, Bruno},
	journal = {Parallel Computing: Problems. Methods and Applications},
	year = {1992},
	publisher = {Elsevier Science Publishers BV}
}

@article{Cic92d,
	title={Fault-tolerance considerations for redundant binary-tree-dynamic random-access-memory (RAM) chips},
	author={Ciciani, Bruno},
	journal={IEEE transactions on reliability},
	volume={41},
	number={1},
	pages={139--148},
	year={1992},
	publisher={IEEE}
}

@article{Cic92e,
	title={Dynamic and static load sharing in hybrid distributed-centralized database systems},
	author={Ciciani, Bruno and Dias, Daniel M and Philip, S Yu},
	journal={Computer Systems Science and Engineering},
	volume={7},
	number={1},
	pages={25--41},
	year={1992},
	publisher={CRL Publishing}
}

@article{Cic91,
	title={A Markov chain-based yield formula for VLSI fault-tolerant chips},
	author={Ciciani, Bruno and Iazeolla, Giuseppe},
	journal={IEEE Transactions on Computer-Aided Design of Integrated Circuits and Systems},
	volume={10},
	number={2},
	pages={252--259},
	year={1991},
	publisher={IEEE}
}

@article{Cic91b,
	title={Redundancy effect on yield of binary tree RAMs},
	author={Ciciani, Bruno},
	journal={Journal of Electronic Testing},
	volume={2},
	number={3},
	pages={293--306},
	year={1991},
	publisher={Springer}
}

@article{Cic90,
	title={A hybrid distributed centralized system structure for transaction processing},
	author={Ciciani, Bruno and Dias, Daniel M. and Iyer, Balakrishna R. and Yu, Philip S.},
	journal={IEEE Transactions on Software Engineering},
	volume={16},
	number={8},
	pages={791--806},
	year={1990},
	publisher={IEEE}
}

@article{Cic90b,
	title={Analysis of replication in distributed database systems},
	author={Ciciani, Bruno and Dias, Daniel M and Yu, Philip S.},
	journal={IEEE Transactions on Knowledge and Data Engineering},
	volume={2},
	number={2},
	pages={247--261},
	year={1990},
	publisher={IEEE}
}

@article{Cic89,
	title={Comments, on" Design and evaluation of a fault-tolerant multiprocessor using hardware recovery blocks" by Y.-H. Lee and KG Shin},
	author={Ciciani, Bruno and Cantone, Giovanni},
	journal={IEEE transactions on computers},
	volume={38},
	number={9},
	pages={1336--1337},
	year={1989},
	publisher={IEEE}
}

@ARTICLE{Bai83,
	title = {The operating system kernel of a message passing distributed multiprocessor},
	author = {Baiardi, F and Ciciani, B and Cioffi, G and Di Vito, G and Fantechi, A and Tomasi, A and Vanneschi, M},
	journal = {The MuTEAM experience in designing distributed systems of microprocessors'.(National Computer Science Program Volume, 1983)},
	pages = {93--122},
	year = {1983}
}

@article{Cic84,
	title={Analysis and comparison of two distributed procedures for the process termination in ECSP environment.},
	author={Ciciani, Bruno and Di Vito, Giovanni},
	journal={INT. J. MINI MICROCOMP.},
	volume={6},
	number={3},
	pages={44--48},
	year={1984}
}

@article{Cic84b,
	title={An efficient strategy for the detection of faults and a domino-free recovery in distributed systems},
	author={Ciciani, Bruno and Di Vito, Giovanni and Rosati, Marco},
	journal={Microprocessing and microprogramming},
	volume={14},
	number={1},
	pages={29--34},
	year={1984},
	publisher={Elsevier}
}

@article{Vel83,
	title={Recovery blocks for communicating systems},
	author={Velardi, Paola and Ciciani, Bruno},
	journal={Microprocessing and microprogramming},
	volume={11},
	number={5},
	pages={287--294},
	year={1983},
	publisher={Elsevier}
}



%%%%% Conference Proceedings %%%%%

@InProceedings{Con20,
  author    = {Conoci, Stefano and Ianni, Mauro and Marotta, Romolo and Pellegrini, Alessandro},
  booktitle = {Proceedings of the 2020 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
  title     = {Autonomic Power Management in Speculative Simulation Runtime Environments},
  year      = {2020},
  month     = jun,
  note      = {To appear},
  publisher = {ACM},
  series    = {PADS},
  abstract  = {While transitioning to exascale systems, it has become clear that power management plays a fundamental role to support a viable utilization of the underlying hardware, also performance-wise. To meet power restrictions imposed by future exascale supercomputers, runtime environments will be required to enforce self-tuning schemes to run dynamic workloads under an imposed power cap. Literature results show that, for a wide class of multi-threaded applications, tuning both the degree of parallelism and frequency/voltage of cores allows a more effective use of the budget, compared to techniques that use only one of these mechanisms in isolation.  
In this paper, we explore the issues associated with applying these techniques on speculative Time-Warp based simulation runtime environments. We discuss how the differences in two antithetical Time Warp-based simulation environments impact the obtained results. Our assessment confirms that the performance gains achieved through a proper allocation of the power budget can be significant. We also identify the research challenges that would make these form of self-tuning more broadly applicable.},
  doi       = {10.1145/3384441.3395980},
  location  = {Miami, FL, USA},
}

@InProceedings{Pri20b,
  author    = {Principe, Matteo and Piccione, Andrea and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the 2020 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
  title     = {Approximated Rollbacks},
  year      = {2020},
  month     = jun,
  note      = {To appear},
  publisher = {ACM},
  series    = {PADS},
  abstract  = {A rollback operation in a speculative parallel discrete event simulator has traditionally targeted the perfect reconstruction of the state to be restored after a timestamp-order violation. This imposes that the rollback support entails specific capabilities and consequently pays given costs. In this article we propose approximated rollbacks, which allow a simulation object to perfectly realign its virtual time to the timestamp of the state to be restored, but lead the reconstructed state to be an approximation of what it should really be. The advantage is an important reduction of the cost for managing the state restore task in a rollback phase, as well as for managing the activities (i.e. state saving) that actually enable rollbacks to be executed. Our proposal is suited for stochastic simulations, and explores a tradeoff between the statistical representativeness of the outcome of the simulation run and the execution performance. We provide mechanisms that enable the application programmer to control this tradeoff, as well as simulation-platform level mechanisms that constitute the basis for managing approximate rollbacks in general simulation scenarios. A study on the aforementioned tradeoff is also presented.},
  doi       = {10.1145/3384441.3395984},
  location  = {Miami, FL, USA},
}

@InProceedings{Sil20,
  author    = {Silvesti, Emiliano and Milia, Cristian and Marotta, Romolo and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the 2020 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
  title     = {Exploiting Inter-Processor-Interrupts for Virtual-Time Coordination in Speculative Parallel Discrete Event Simulation},
  year      = {2020},
  month     = jun,
  note      = {To appear},
  publisher = {ACM},
  series    = {PADS},
  abstract  = {Reducing the waste of resource usage (e.g., CPU-cycles) when a causality error occurs in speculative parallel discrete event simulation (PDES) is still a core objective. In this article,
we target this objective in the context of speculative PDES run on top of shared-memory machines. We propose an Operating System 
approach that is based on the exploitation of the Inter-Processor-Interrupt (IPI) facility offered by off-the-shelf hardware chip sets, which enables cross-CPU-core control of the execution flow of threads. As soon as a thread $T$ produces a new event placed in the past virtual time of a simulation object currently run by another thread $T'$, our IPI-based support allows $T$ to change the execution flow of $T'$---with very minimal delay---so to enable the early squash of the currently processed (and no longer consistent) event. Our solution is fully transparent to the application level code, and is coupled with a lightweight heuristic-based mechanism that determines the actual goodness of killing thread $T'$ via the IPI  (rather than skipping the IPI send) depending on the expected residual execution time of the incorrect event being processed. We integrated our proposal within the speculative open-source USE (Ultimate Share Everything) PDES package, and we report experimental results obtained by running various PDES models on top of two shared-memory hardware architectures equipped with 32 and 24 (48 Hyper-threads) CPU-cores, which demonstrate the effectiveness of our proposal.},
  doi       = {10.1145/3384441.3395985},
  location  = {Miami, FL, USA},
}

@InProceedings{Alt20,
  author    = {Altamura, Lorenzo and Conoci, Stefano and Pellegrini, Alessandro},
  booktitle = {15th International Conference on High Performance and Embedded Architecture and Compilation Workshops},
  title     = {Asymmetric Computation for Speculative Heterogeneous HPC},
  year      = {2020},
  month     = jan,
  series    = {HiPEAC},
  abstract  = {HPC applications on future exascale systems will demand for runtime environments able to transparently manage the complexity of the underlying heterogeneous hardware. In this abstract, we discuss a computation model for speculative HPC applications, able to deliver non-minimal performance increase and significant energy savings. This model can be easily adapted to multiple heterogeneous hardware families with minor effort, and it can autonomically and promptly reassign units of work to different hardware classes. Our design jointly targets performance and energy efficiency. We also provide a preliminary experimental evaluation of our design.},
  location  = {Bologna, Italy},
}

@InProceedings{Car19,
  author    = {Carnà, Stefano and Ferracci, Serena and De Santis, Emanuele and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the 2019 Winter Simulation Conference},
  title     = {Hardware-assisted Incremental Checkpointing in Speculative Parallel Discrete Event Simulation},
  year      = {2019},
  month     = dec,
  publisher = {ACM},
  series    = {WSC},
  abstract  = {Nowadays hardware platforms offer a plethora of innovative facities for profiling the execution of programs. Most of them have been exploited as tools for program characterization, thus being used as kind of program-external observers. In this article we take the opposite perspective where hardware profiling facilities are exploited to execute core functional tasks for the correct and efficient execution of speculative Parallel Discrete Event Simulation (PDES) applications. In more detail we exploit them—specifically, the ones offered by Intel x86-64 processors—to build a hardware-supported incremental checkpointing solution that enables the reduction of the event-execution cost in speculative PDES compared to the software-based counterpart. We integrated our solution in the open source ROOT-Sim runtime environment, thus making it available for exploitation.},
  location  = {Washington, DC, USA},
}

@InProceedings{Pic19,
  author    = {Piccione, Andrea and Principe, Matteo and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the 2019 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
  title     = {An Agent-Based Simulation API for Speculative PDES Runtime Environments},
  year      = {2019},
  month     = jun,
  pages     = {83--94},
  publisher = {ACM},
  series    = {PADS},
  abstract  = {Agent-Based Modeling and Simulation (ABMS) is an effective paradigm to model systems exhibiting complex interactions, also with the goal of studying the emergent behavior of these systems. While ABMS has been effectively used in many disciplines, many successful models are still run only sequentially. Relying on simple and easy-to-use languages such as NetLogo limits the possibility to benefit from more effective runtime paradigms, such as speculative Parallel Discrete Event Simulation (PDES). In this paper, we discuss a semantically-rich API allowing to implement Agent-Based Models in a simple and effective way. We also describe the critical points which should be taken into account to implement this API in a speculative PDES environment, to scale up simulations on distributed massively-parallel clusters. We present an experimental assessment showing how our proposal allows to implement complicated interactions with a reduced complexity, while delivering a non-negligible performance increase.},
  doi       = {10.1145/3316480.3322890},
  location  = {Chicago, IL, USA},
}

@InProceedings{Mar19,
  author    = {Marotta, Romolo and Ianni, Mauro and Scarselli, Andrea and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the 19th International Symposium in Cluster, Cloud and Grid Computing},
  title     = {NBBS: A Non-blocking Buddy System for Multi-core Machines},
  year      = {2019},
  month     = may,
  pages     = {11--20},
  publisher = {IEEE Computer Society},
  series    = {CCGrid},
  abstract  = {Common implementations of core memory allocation components, like the Linux buddy system, handle concurrent allocation/release requests by synchronizing threads via spinlocks. This approach is not prone to scale, a problem that has been addressed in the literature by introducing layered allocation services or replicating the core allocators—the bottom most ones within the layered architecture. Both these solutions tend to reduce the pressure of actual concurrent accesses to each individual core allocator. In this article we explore an alternative approach to scalability of memory allocation/release, which can be still combined with those literature proposals. We present a fully non-blocking buddy-system, where threads performing concurrent allocations/releases do not undergo any spin-lock based synchronization. Our solution allows threads to proceed in parallel, and commit their allocations/releases unless a conflict is materialized while handling the allocator metadata. Conflict detection relies on atomic Read-Modify-Write (RMW) machine instructions. Beyond improving scalability and performance, our solution can also avoid wasting clock cycles for spin-lock operations by threads that could in principle carry out their memory allocations/releases in full concurrency.},
  doi       = {10.1109/CCGRID.2019.00011},
  location  = {Larnaca, Cyprus},
}

@INPROCEEDINGS{Eco18,
	author = {Economo, Simone and Silvestri, Emiliano and Di Sanzo, Pierangelo and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Model-based Proactive Read-validation in Transaction Processing Systems},
	booktitle = {Proceedings of the 24th International Conference on Parallel and Distributed Systems},
	series = {ICPADS},
	pages = {481--488},
	year = {2018},
	month = dec,
	publisher = {IEEE Computer Society},
	location = {Singapore},
	doi = {10.1109/PADSW.2018.8644605}
}

@INPROCEEDINGS{Ian18b,
	author = {Ianni, Mauro and Marotta, Romolo and Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Optimizing Simulation on Shared-Memory Platforms: the Smart Cities Case},
	booktitle = {Proceedings of the 2018 Winter Simulation Conference},
	series = {WSC},
	year = {2018},
	month = dec,
	pages = {1969--1980},
	publisher = {IEEE Computer Society},
	location = {Gothenburg, Sweden},
	doi = {10.1109/WSC.2018.8632301}
}

@INPROCEEDINGS{Mar18,
	author = {Marotta, Romolo and Ianni, Mauro and Scarselli, Andrea and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Non-blocking Buddy System for Scalable Memory Allocation on Multi-core Machines},
        booktitle = {{IEEE} International Conference on Cluster Computing},
	series = {CLUSTER},
	pages = {164--165},
	year = {2018},
	month = sep,
	publisher = {IEEE Computer Society},
	location = {Belfast, UK},
	doi = {10.1109/CLUSTER.2018.00034}
}

@INPROCEEDINGS{Ian18,
	author = {Ianni, Mauro and Marotta, Romolo and Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {The Ultimate Share-Everything PDES System},
	booktitle = {Proceedings of the 2018 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2018},
	pages = {73--84},
	month = may,
	publisher = {ACM},
	location = {Rome, Italy},
	doi = {10.1145/3200921.3200931}
}

@INPROCEEDINGS{Con18b,
	author = {Conoci, Stefano and Cingolani, Davide and Di~Sanzo, Pierangelo and Pellegrini, Alessandro and Ciciani, Bruno and Quaglia, Francesco},
	title = {A Power Cap Oriented Time Warp Architecture},
	booktitle = {Proceedings of the 2018 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	pages = {97--100},
	year = {2018},
	month = may,
	publisher = {ACM},
	location = {Rome, Italy},
	doi = {10.1145/3200921.3200930}
}


@INPROCEEDINGS{Pri18,
	author = {Principe, Matteo and Tocci, Tommaso and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Porting Event \& Cross-State Synchronization to the Cloud},
	booktitle = {Proceedings of the 2018 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2018},
	pages = {177--188},
	month = may,
	publisher = {ACM},
	location = {Rome, Italy},
	doi = {10.1145/3200921.3200929},
	note = {Candidate for (but not winner of) the Best Paper Award},
}


@inproceedings{Con18,
	author = {Conoci, Stefano and Pierangelo, Di Sanzo and Bruno, Ciciani and Francesco, Quaglia},
	title = {Adaptive Performance Optimization under Power Constraint in Multi-thread Applications with Diverse Scalability},
	booktitle = {Proceedings of the 9th ACM/SPEC International Conference on Performance Engineering (ICPE 2018), Berlin,April 9-13,2018},
	year = {2018},
	doi={10.1145/3184407.3184419}
}

@INPROCEEDINGS{Eco17,
	author = {Economo, Simone and Silvestri, Emiliano and Di Sanzo, Pierangelo and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Prompt Application-Transparent Transaction Revalidation in Software Transactional Memory},
	booktitle = {Proceedings of the 16th IEEE International Symposium on Network Computing and Applications},
	series = {NCA},
	year = {2017},
	month = oct,
	pages = {114--119},
	publisher = {IEEE Computer Society},
	location = {Cambridge, MA, USA},
	doi = {10.1109/NCA.2017.8171349}
}

@INPROCEEDINGS{Avr17,
	author = {Avresky, Dimiter R. and Pellegrini, Alessandro and Di Sanzo, Pierangelo},
	title = {Machine Learning-based Management of Cloud Applications in Hybrid Clouds: a Hadoop Case Study},
	booktitle = {Proceedings of the 16th IEEE International Symposium on Network Computing and Applications},
	series = {NCA},
	year = {2017},
	month = oct,
	pages = {114--119},
	publisher = {IEEE Computer Society},
	location = {Cambridge, MA, USA},
	doi = {10.1109/NCA.2017.8171352}
}

@INPROCEEDINGS{Toc17,
	author = {Tocci, Tommaso and Pellegrini, Alessandro and Quaglia, Francesco and Casanovas-García, Josep and Suzumura, Toyotaro},
	title = {ORCHESTRA: An Asynchronous Wait-Free Distributed GVT Algorithm},
	booktitle = {Proceedings of the 21st IEEE/ACM International Symposium on Distributed Simulation and Real Time Applications},
	series = {DS-RT},
	pages = {51--58},
	year = {2017},
	month = oct,
	publisher = {IEEE Computer Society},
	location = {Rome, Italy},
	doi = {10.1109/DISTRA.2017.8167666}
}

@INPROCEEDINGS{Ian17c,
	author = {Ianni, Mauro and Marotta, Romolo and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Towards a Fully Non-blocking Share-everything PDES Platform},
	booktitle = {Proceedings of the 21st IEEE/ACM International Symposium on Distributed Simulation and Real Time Applications},
	series = {DS-RT},
	pages = {25--32},
	year = {2017},
	month = oct,
	publisher = {IEEE Computer Society},
	location = {Rome, Italy},
	name = {ds-rt17c},
	doi = {10.1109/DISTRA.2017.8167663}
}

@INPROCEEDINGS{Ian17b,
	author = {Ianni, Mauro and Marotta, Romolo and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Non-blocking Global Virtual Time Algorithm with Logarithmic Number of Memory Operations},
	booktitle = {Proceedings of the 21st IEEE/ACM International Symposium on Distributed Simulation and Real Time Applications},
	series = {DS-RT},
	pages = {17--24},
	year = {2017},
	month = oct,
	publisher = {IEEE Computer Society},
	location = {Rome, Italy},
	note = {Candidate for (but not winner of) the Best Paper Award},
	name = {ds-rt17b},
	doi = {10.1109/DISTRA.2017.8167662}
}

@INPROCEEDINGS{Ian17,
	author = {Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Wait-free Multi-word Atomic (1,N) Register for Large-scale Data Sharing on Multi-core Machines},
	booktitle = {Proceedings of the 2017 IEEE Cluster Conference},
	series = {CLUSTER},
	pages = {188--192},
	year = {2017},
	month = sep,
	publisher = {IEEE Computer Society},
	location = {Honolulu, HI, USA},
	doi = {10.1109/CLUSTER.2017.84}
}

@INPROCEEDINGS{Cin17,
	author = {Cingolani, Davide and Pellegrini, Alessandro and Schordan, Markus and Quaglia, Francesco and Jefferson, David R.},
	title = {Dealing with Reversibility of Shared Libraries in PDES},
	booktitle = {Proceedings of the 2017 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2017},
	month = may,
	publisher = {ACM},
	location = {Singapore},
	name = {pads17b}
}

@INPROCEEDINGS{Mar17,
	author = {Marotta, Romolo and Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Conflict-Resilient Lock-Free Calendar Queue for Scalable Share-Everything PDES Platforms},
	booktitle = {Proceedings of the 2017 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	pages = {41--52},
	year = {2017},
	month = may,
	publisher = {ACM},
	location = {Singapore},
	doi = {10.1145/3064911.3064927}
}

@INPROCEEDINGS{Sil17,
	author = {Silvestri, Emiliano and Economo, Simone and Di Sanzo, Pierangelo and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Preemptive Software Transactional Memory},
	booktitle = {Proceedings of the 17th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing},
	series = {CCGrid},
	year = {2017},
	month = may,
	publisher = {IEEE Computer Society},
	location = {Madrid, Spian},
}

@article{Pell17,
	author = {Pellegrini, Alessandro and Di Sanzo, Pierangelo},
	title = {On the Optimization of Collaborative Kerbside Waste Collection},
	booktitle = {Proceedings of the 14th International Conference on Energy, Environment, Ecosystems and Sustainable Development},
	series = {EEESD},
	year = {2017},
	month = jan,
	publisher = {WSEAS},
	location = {Rome, Italy},
}

@INPROCEEDINGS{Pell16d,
	author = {Pellegrini, Alessandro and Montañola-Sales, Cristina and Quaglia, Francesco and Casanovas-Garcia, Josep},
	title = {Programming Agent-Based Demographic Models with Cross-State and Message-Exchange Dependencies: A Study with Speculative PDES and Automatic Load-Sharing},
	booktitle = {Proceedings of the 2016 Winter Simulation Conference},
	series = {WSC},
	year = {2016},
	month = dec,
	publisher = {IEEE Computer Society},
	location = {Washington, D.C., USA},
}

@INPROCEEDINGS{Mar16c,
	author = {Marotta, Romolo and Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Lock-Free O(1) Event Pool and its Application to Share-Everything PDES Platforms},
	booktitle = {Proceedings of the 20th IEEE/ACM International Symposium on Distributed Simulation and Real Time Applications},
	series = {DS-RT},
	year = {2016},
	month = sep,
	publisher = {IEEE Computer Society},
	location = {London, UK},
	note = {Winner of the Best Paper Award}
}

@INPROCEEDINGS{Eco16,
	author = {Economo, Simone and Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Configurable and Efficient Memory Access Tracing via Selective Expression-based x86 Binary Instrumentation},
	booktitle = {Proceedings of the 24th IEEE Internation Symposium on Modelling, Analysis and Simulation of Computer and Telecommunication Systems},
	series = {MASCOTS},
	year = {2016},
	month = sep,
	publisher = {IEEE Computer Society},
	location = {London, UK}
}

@INPROCEEDINGS{Pell16e,
	author = {Pellegrini, Alessandro and Montañola-Sales, Cristina and Quaglia, Francesco and Casanovas-Garcia, Josep},
	title = {Load-Sharing Policies in Parallel Simulation of Agent-Based Demographic Models},
	booktitle = {Proceedings of the 4th Workshop on Parallel and Distributed Agent-Based Simulations},
	series = {PADABS},
	year = {2016},
	month = aug,
	publisher = {LNCS, Springer-Verlag},
	location = {Grenoble, France}
}

@INPROCEEDINGS{Mar16b,
	author = {Marotta, Romolo and Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Non-Blocking Priority Queue for the Pending Event Set},
	booktitle = {Proceedings of the 9th EAI International Conference on Simulation Tools and Techniques},
	series = {SIMUTools},
	year = {2016},
	pages = {46--55},
	month = aug,
	publisher = {ICST},
	location = {Prague, Czech Republic},
}

@INPROCEEDINGS{Pell16c,
	author = {Pellegrini, Alessandro},
	title = {Optimizing Memory Management for Optimistic Simulation with Reinforcement Learning},
	booktitle = {Proceedings of the 2016 International Conference on High Performance Computing \& Simulation Workshops},
	series = {HPCS},
	year = {2016},
	pages = {26--33},
	month = jul,
	publisher = {IEEE Computer Society},
	location = {Innsbruck, Austria},
}

@INPROCEEDINGS{Cin16,
	author = {Cingolani, Davide and Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Mixing Hardware and Software Reversibility for Speculative Parallel Discrete Event Simulation},
	booktitle = {Proceedings of the 8th Conference on Reversible Computation},
	series = {RC},
	year = {2016},
	month = jul,
	pages = {137--152},
	publisher = {Springer-Verlag},
	location = {Bologna, Italy},
}

@INPROCEEDINGS{LaR16,
	author = {La Rizza, Andrea and Casarano, Giuseppe and Castellani, Gilberto and Ciciani, Bruno and Passalacqua, Luca and Pellegrini, Alessandro},
	title = {Machine Learning-based Elastic Cloud Resource Provisioning in the Solvency II Framework},
	booktitle = {Proceedings of the 2016 IEEE 36th International Conference on Distributed Computing Systems Workshops},
	series = {ICDCS},
	year = {2016},
	month = jun,
	pages = {44--48},
	publisher = {IEEE Computer Society},
	location = {Nara, Japan},
}

@INPROCEEDINGS{Pell16,
	author = {Pellegrini, Alessandro and Di Sanzo, Pierangelo and Avresky, Dimiter R.},
	title = {Proactive Cloud Management for Highly Heterogeneous Multi-Cloud Infrastructures},
	booktitle = {Proceedings of the 21st IEEE Workshop on Dependable Parallel, Distributed and Network-Centric Systems},
	series = {DPDNS},
	year = {2016},
	month = may,
	publisher = {IEEE Computer Society},
	location = {Chicago, IL, USA},
}

@INPROCEEDINGS{Mar16,
	author = {Marziale, Nazzareno and Nobilia, Francesco and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Granular Time Warp Objects},
	booktitle = {Proceedings of the 2016 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2016},
	pages = {57--68},
	month = may,
	publisher = {ACM},
	location = {Banff, Canada},
}

@INPROCEEDINGS{DiG16,
	author = {Di Gennaro, Ilaria and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {OS-based NUMA Optimization: Tackling the Case of Truly Multi-thread Applications with Non-Partitioned Virtual Page Accesses},
	booktitle = {Proceedings of the 16th IEEE/ACM International Symposium on Cluster, Cloud and Grid Computing},
	series = {CCGrid},
	year = {2016},
	pages = {292--300},
	month = may,
	publisher = {IEEE Computer Society},
	location = {Cartagena, Colombia},
}

@INPROCEEDINGS{Bus15,
	author = {Büsing-Menses, Vanessa and Montañola-Sales, Cristina and Casanovas-Garcia, Josep and Pellegrini, Alessandro},
	title = {Analysis and Optimization of a Demographic Simulator for Parallel Environments (poster paper)},
	booktitle = {Proceedings of the 2015 Winter Simulation Conference},
	series = {WSC},
	year = {2015},
	month = dec,
	publisher = {IEEE Computer Society},
	location = {Huntington Beach, CA, USA},
}

@INPROCEEDINGS{San15,
	author = {Santini, Emanuele and Ianni, Mauro and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Hardware-Transactional-Memory Based Speculative Parallel Discrete Event Simulation of Very Fine Grain Models},
	booktitle = {Proceedings of the 22nd International Conference on High Performance Computing},
	series = {HiPC},
	year = {2015},
	month = dec,
	publisher = {IEEE Computer Society},
	location = {Bengaluru, India},
}


@INPROCEEDINGS{Avr15,
	author = {Avresky, Dimiter R. and Di Sanzo, Pierangelo and Pellegrini, Alessandro and Ciciani, Bruno and Forte, Luca},
	title = {Proactive Scalability and Management of Resources in Hybrid Clouds via Machine Learning (short paper)},
	booktitle = {Proceedings of the 14th IEEE International Symposium on Network Computing and Applications},
	series = {NCA},
	year = {2015},
	month = sep,
	pages = {114--119},
	publisher = {IEEE Computer Society},
	location = {Boston, MA, USA}
}

@INPROCEEDINGS{Cin15b,
	author = {Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {{RAMSES}: Reversibility-based Agent Modeling and Simulation Environment with Speculation support},
	booktitle = {Proceedings of the 3rd Workshop on Parallel and Distributed Agent-Based Simulations},
	series = {PADABS},
	year = {2015},
	month = aug,
	pages = {466--478},
	publisher = {LNCS, Springer-Verlag},
	isbn = {978-3-319-27307-5},
	doi = {10.1007/978-3-319-27308-2_38},
	location = {Vienna, Austria}
}

@INPROCEEDINGS{DiS15b,
	author = {Di Sanzo, Pierangelo and Pellegrini, Alessandro and Avresky, Dimiter R.}, 
	title = {Machine Learning for Achieving Self-* Properties and Seamless Execution of Applications in the Cloud},
	booktitle = {Proceedings of the Fourth IEEE Symposium on Network Cloud Computing and Applications},
	series = {NCCA},
	year = {2015},
	month = jun,
	pages = {51--58},
	publisher = {IEEE Computer Society},
	isbn = {978-1-4673-7741-6},
	doi = {10.1109/NCCA.2015.18},
	location = {Munich, Germany}
}

@INPROCEEDINGS{Cin15,
	author = {Cingolani, Davide and Pellegrini, Alessandro and Quaglia, Francesco}, 
	title = {Transparently Mixing Undo Logs and Software Reversibility for State Recovery in Optimistic PDES},
	booktitle = {Proceedings of the 2015 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2015},
	pages = {211--222},
	month = jun,
	publisher = {ACM},
	location = {London, UK},
	name = {pads15m}
}

@INPROCEEDINGS{Pell15c,
	author = {Pellegrini, Alessandro and Quaglia, Francesco}, 
	title = {NUMA Time Warp},
	booktitle = {Proceedings of the 2015 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2015},
	month = jun,
	pages = {59--70},
	publisher = {ACM},
	isbn = {978-1-4503-3583-6},
	doi = {10.1145/2769458.2769479},
	location = {London, UK},
	name = {pads15n}
}

@INPROCEEDINGS{Pell15b,
	author = {Pellegrini, Alessandro and Quaglia, Francesco}, 
	title = {Time-Sharing Time Warp via Lightweight Operating System Support},
	booktitle = {Proceedings of the 2015 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2015},
	month = jun,
	pages = {47--58},
	publisher = {ACM},
	location = {London, UK},
	name = {pads15t}
}


@INPROCEEDINGS{Pell15,
	author = {Pellegrini, Alessandro and Di Sanzo, Pierangelo and Avresky, Dimiter R.}, 
	title = {A Machine Learning-based Framework for Building Application Failure Prediction Models},
	booktitle = {Proceedings of the 20th IEEE Workshop on Dependable Parallel, Distributed and Network-Centric Systems},
	series = {DPDNS},
	year = {2015},
	month = may,
	pages = {1072--1081},
	publisher = {IEEE Computer Society},
	doi = {10.1109/IPDPSW.2015.110},
	location = {Hyderabad, India}
}
	
@INPROCEEDINGS{Pell14c,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Wait-Free {Global Virtual Time} Computation in Shared Memory {Time-Warp} Systems},
	booktitle = {Proceedings of the 26th International Conference on Computer Architecture and High Performance Computing},
	series = {SBAC-PAD},
	year = {2014},
	month = oct,
	publisher = {IEEE Computer Society},
	location = {Paris, France}
}

@INPROCEEDINGS{Pell14b,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Programmability and Performance of Parallel {ECS}-based Simulation of Multi-Agent Exploration Models},
	booktitle = {Proceedings of the 2nd Workshop on Parallel and Distributed Agent-Based Simulations},
	series = {PADABS},
	year = {2014},
	month = aug,
	publisher = {LNCS, Springer-Verlag},
	location = {Porto, Portugal}
}

@INPROCEEDINGS{Pell14,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Transparent Multi-Core Speculative Parallelization of {DES} Models with Event and Cross-State Dependencies},
	booktitle = {Proceedings of the 2014 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2014},
	month = may,
	pages = {105--116},
	publisher = {ACM},
	location = {Denver, Colorado, USA},
}

@INPROCEEDINGS{Rug14,
	author = {Rughetti, Diego and Di Sanzo, Pierangelo and Pellegrini, Alessandro},
	title = {Adaptive Transactional Memories: Performance and Energy Consumption Tradeoffs},
	booktitle = {Proceedings of the Third IEEE Symposium on Network Cloud Computing and Applications},
	series = {NCCA},
	year = {2014},
	month = feb,
	publisher = {IEEE Computer Society},
	location = {Rome, Italy}
}

@INPROCEEDINGS{Pell13d,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {The {ROme OpTimistic Simulator}: A Tutorial (invited tutorial)},
	booktitle = {Proceedings of the 1st Workshop on Parallel and Distributed Agent-Based Simulations},
	series = {PADABS},
	year = {2013},
	month = aug,
	publisher = {LNCS, Springer-Verlag},
	location = {Aachen, Germany},
	name = {padabs13-tutorial}
}

@INPROCEEDINGS{Pell13c,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Study on the Parallelization of Terrain-Covering Ant Robots Simulations},
	booktitle = {Proceedings of the 1st Workshop on Parallel and Distributed Agent-Based Simulations},
	series = {PADABS},
	year = {2013},
	month = aug,
	publisher = {LNCS, Springer-Verlag},
	location = {Aachen, Germany},
}

@INPROCEEDINGS{Por13,
	author = {Porfirio, Alice and Pellegrini, Alessandro and Di Sanzo, Pierangelo and Quaglia, Francesco},
	title = {Transparent Support for Partial Rollback in Software Transactional Memories},
	booktitle = {Proceedings of the International Euro-Par 2013 Conference},
	series = {Euro-Par},
	year = {2013},
	month = aug,
	publisher = {LNCS, Springer-Verlag},
	location = {Aachen, Germany},
}


@INPROCEEDINGS{Pell13b,
	author = {Pellegrini, Alessandro},
	title = {Hijacker: Efficient Static Software Instrumentation with Applications in High Performance Computing (poster paper)},
	booktitle = {Proceedings of the 2013 International Conference on High Performance Computing \& Simulation},
	series = {HPCS},
	month = jul,
	year = {2013},
	pages = {650--655},
	publisher = {IEEE Computer Society},
	location = {Helsinki, Finland},
	note = {Candidate for (but not winner of) the Outstanding Poster Paper Award},
}


@INPROCEEDINGS{Ant13,
	author = {Antonacci, Francesco and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Consistent and Efficient Output-Stream Management in Optimistic Simulation Platform},
	booktitle = {Proceedings of the 2013 ACM SIGSIM Conference on Principles of Advanced Discrete Simulation},
	series = {PADS},
	year = {2013},
	month = may,
	pages = {315--326},
	publisher = {ACM},
	location = {Montréal, Canada}
}


@INPROCEEDINGS{Pell13,
	author = {Pellegrini, Alessandro and Piro, Giuseppe},
	title = {Multi-threaded Simulation of {4G} Cellular Systems within the {LTE-Sim} Framework},
	booktitle = {Proceedings of the 8th IEEE International Workshop on the Performance Analysis and Enhancement of Wireless Networks},
	series = {PAEWN},
	year = {2013},
	month = mar,
	publisher = {IEEE Computer Society},
	location = {Barcelona, Spain}
}

@INPROCEEDINGS{Dis13,
	author = {Di Sanzo, Pierangelo and Antonacci, Francesco and Ciciani, Bruno and Palmieri, Roberto and Pellegrini, Alessandro and Peluso, Sebastiano and Quaglia, Francesco and Rughetti, Diego and Vitali, Roberto},
	title = {A Framework for High Performance Simulation of Transactional Data Grid Platforms},
	booktitle = {Proceedings of the 6th ICST Conference of Simulation Tools and Techniques},
	series = {SIMUTools},
	month = mar,
	year = {2013},
	publisher = {ICST},
	location = {Nice, France}
}



@INPROCEEDINGS{Vit12d,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {A Load Sharing Architecture for Optimistic Simulations on Multi-Core Machines},
	booktitle = {Proceedings of the 19th International Conference on High Performance Computing},
	series = {HiPC},
	year = {2012},
	month = dec,
	publisher = {IEEE Computer Society},
	location = {Pune, India}
}

@INPROCEEDINGS{Vit12c,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Assessing Load Sharing within Optimistic Simulation Platforms (invited paper)},
	booktitle = {Proceedings of the 2012 Winter Simulation Conference},
	series = {WSC},
	year = {2012},
	month = dec,
	publisher = {Society for Computer Simulation},
	location = {Berlin, Germany}
}

@INPROCEEDINGS{Pell12,
	author = {Pellegrini, Alessandro and Vitali, Roberto and Peluso, Sebastiano and Quaglia, Francesco},
	title = {Transparent and Efficient Shared-State Management for Optimistic Simulations on Multi-core Machines},
	booktitle = {Proceedings 20th International Symposium on Modeling, Analysis and Simulation of Computer and Telecommunication Systems},
	series = {MASCOTS},
	year = {2012},
	month = aug,
	pages = {134--141},
	publisher = {IEEE Computer Society},
	location = {Arlington, VA, USA}
}

@INPROCEEDINGS{Vit12b,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Towards Symmetric Multi-threaded Optimistic Simulation Kernels},
	booktitle = {Proceedings of the 26th International Workshop on Principles of Advanced and Distributed Simulation},
	series = {PADS},
	year = {2012},
	month = aug,
	pages = {211--220},
	publisher = {IEEE Computer Society},
	location = {Zhangjiajie, China}
}

@INPROCEEDINGS{Vit12,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Cerasuolo, Gionata},
	title = {Cache-Aware Memory Manager for Optimistic Simulations},
	booktitle = {Proceedings of the 5th ICST Conference of Simulation Tools and Techniques},
	series = {SIMUTools},
	month = mar,
	year = {2012},
	publisher = {ICST},
	location = {Desenzano del Garda, Italy},
	note = {Winner of the Best Paper Award},
}


@INPROCEEDINGS{Pell11b,
	author = {Pellegrini, Alessandro and Vitali, Roberto and Quaglia, Francesco},
	title = {The {ROme OpTimistic Simulator}: Core Internals and Programming Model},
	booktitle = {Proceedings of the 4th International {ICST} Conference on Simulation Tools and Techniques},
	series = {SIMUTools},
	year = {2011},
	journal = {Proceedings of the 4th ICST Conference of Simulation Tools and Techniques},
	publisher = {ICST},
	location = {Barcelona, Spain},
	name = {simutools11b},
}

@INPROCEEDINGS{Pell11,
	author = {Pellegrini, Alessandro and Vitali, Roberto and Quaglia, Francesco},
	title = {An Evolutionary Algorithm to Optimize Log/Restore Operations within Optimistic Simulation Platforms},
	booktitle = {Proceedings of the 4th International {ICST} Conference on Simulation Tools and Techniques},
	series = {SIMUTools},
	year = {2011},
	publisher = {SIGSIM},
	location = {Barcelona, Spain}
}

@InProceedings{Vit10,
  author    = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
  booktitle = {Proceedings of the Symposium on Modeling, Analysis, and Simulation of Computer and Telecommunication Systems},
  title     = {Autonomic Log/Restore for Advanced Optimistic Simulation Systems},
  year      = {2010},
  pages     = {319--327},
  publisher = {IEEE Computer Society},
  series    = {MASCOTS},
  doi       = {10.1109/MASCOTS.2010.40},
  issn      = {1526-7539},
  location  = {Miami Beach, Florida, USA},
}

@INPROCEEDINGS{Vit09,
	author = {Vitali, Roberto and Pellegrini, Alessandro and Quaglia, Francesco},
	title = {Benchmarking Memory Management Capabilities within ROOT-Sim},
	booktitle = {Proceedings of the 13th {IEEE/ACM} International Symposium on Distributed Simulation and Real Time Applications},
	series = {DS-RT},
	year = {2009},
	publisher = {IEEE Computer Society},
	location = {Singapore}
}

@InProceedings{Pell09,
  author    = {Pellegrini, Alessandro and Vitali, Roberto and Quaglia, Francesco},
  booktitle = {Proceedings of the 2009 ACM/IEEE/SCS 23rd Workshop on Principles of Advanced and Distributed Simulation},
  title     = {{Di-DyMeLoR}: Logging only Dirty Chunks for Efficient Management of Dynamic Memory Based Optimistic Simulation Objects},
  year      = {2009},
  note      = {Candidate for (but not winner of) the Best Paper Award},
  pages     = {45--53},
  publisher = {IEEE Computer Society},
  series    = {PADS},
  doi       = {10.1109/PADS.2009.24},
  isbn      = {978-0-7695-3713-9},
  location  = {Lake Placid, NY, USA},
}


%%%%% Talks %%%%%

@TechReport{Pell20,
  author   = {Pellegrini, Alessandro},
  title    = {Reproducibility Report for the Paper: Modeling of Request Cloning in Cloud Server Systems using Processor Sharing},
  year     = {2020},
  month    = {2},
  abstract = {The authors have uploaded their artifact on Zenodo, which ensures a long-term retention of the artifact. The code is suitably documented, and some examples are given. A minimalistic overall description of the engine is provided. The artifact allows to setup the environment quite quickly, and the dependencies are well documented. The process to regenerate data for the gures in the paper completes, and all results are reproducible.
This paper can thus receive the Artifacts Available badge and the Artifacts Evaluated—Functional. Given
the high quality of the artifact, also the Artifacts Evaluated—Reusable badge can be assigned.},
  journal  = {CoRR},
}

@TechReport{Mar19b,
  author        = {Marotta, Romolo and Tiriticco, Davide and Di~Sanzo, Pierangelo and Pellegrini, Alessandro and Ciciani, Bruno and Quaglia, Francesco},
  institution   = {CoRR},
  title         = {Mutable Locks: Combining the Best of Spin and Sleep Locks},
  year          = {2019},
  abstract      = {In this article we present Mutable Locks, a synchronization construct with the same execution semantic of traditional locks (such as spin locks or sleep locks), but with a self-tuned optimized trade off between responsiveness—in the access to a just released critical section—and CPU-time usage during threads’ wait phases. It tackles the need for modern synchronization supports, in the era of multi-core machines, whose runtime behavior should be optimized along multiple dimensions (performance vs resource consumption) with no intervention by the application programmer. Our proposal is intended for exploitation in generic concurrent applications where scarce or none knowledge is available about the underlying software/hardware stack and the actual workload, an adverse scenario for static choices between spinning and sleeping faced by mutable locks just thanks to their hybrid waiting phases and self-tuning capabilities.},
  archiveprefix = {arXiv},
  eprint        = {1906.00490},
  url           = {http://arxiv.org/abs/1906.00490},
  volume        = {abs/1906.00490},
}

@techreport{Pri17,
	author = {Principe, Matteo and Pellegrini, Alessandro and Quaglia, Francesco and Ciciani, Bruno},
	title = {Transparent Distributed Cross-State Synchronization in Optimistic Parallel Discrete Event Simulation},
	year = {2017},
	month = dec,
	institution = {Sapienza, University of Rome}
}

@UNPUBLISHED{Ian17-unpub,
  author    = {Mauro Ianni and
               Alessandro Pellegrini and
               Francesco Quaglia},
  title     = {A Wait-free Multi-word Atomic (1, N) Register for Large-scale Data Sharing on Multi-core Machines},
  journal   = {CoRR},
  volume    = {abs/1707.07478},
  year      = {2017},
  url       = {http://arxiv.org/abs/1707.07478},
  archivePrefix = {arXiv},
  eprint    = {1707.07478},
}

@UNPUBLISHED{Pell14-talk2,
	author = {Pellegrini, Alessandro and Quaglia, Francesco},
	title = {On the Relevance of Wait-free Coordination Algorithms in Shared-Memory HPC: The Global Virtual Time Case},
	month = oct,
	year = {2014},
	note = {Workshop di Informatica Quantitativa},
	series = {InfQ},
	location = {Torino, Italy}
}

@UNPUBLISHED{Pell14-talk,
	author = {Pellegrini, Alessandro},
	title = {Adaptive Transactional Memories: Performance and Energy Consumption Tradeoffs (poster + talk)},
	month = apr,
	year = {2014},
	note = {Euro-TM Workshop on Transactional Memory},
	series = {WTM},
	location = {Amsterdam, The Netherlands}
}

@UNPUBLISHED{Pell12b,
	author = {Pellegrini, Alessandro},
	title = {A Symmetric Multi-threaded Architecture for Load-sharing in Multi-core Optimistic Simulations},
	month = jul,
	year = {2012},
	note = {Workshop di Informatica Quantitativa},
	series = {InfQ},
	location = {Lucca, Italy}
}






%%%%% THESES %%%%%

@MastersThesis{tAlta20,
  author   = {Altamura, Lorenzo},
  school   = {Sapienza, University of Rome},
  title    = {Asymmetric Runtime Environments for Increased-Performance Speculative PDES},
  year     = {2020},
  month    = jan,
  type     = {mathesis},
  abstract = {Future exascale systems will require runtime environments able to manage the complexity of the underlying heterogeneus hardware. This thesis discusses about asymmetric features in existing high performance applications to obtain consistent increase in terms of performance by properly exploiting the asymmetry shown by current pre-exascale systems. In particular, the focus is on parallel discrete events simulation (PDES) and possible solutions to best exploit asymmetry in threads by limiting the drawbacks in terms of the overhead brought by the time warp optimistic synchronization protocol.
Experimental data show how relevant the gain in terms of performance is when self-adjusting algorithms autonomically manage the balance between asymmetric thread incarnations.},
  comment  = {Supervisor: A. Pellegrini. Co-Supervisor: S. Conoci},
}

@MastersThesis{tCarn18,
  author   = {Carnà, Stefano},
  school   = {Sapienza, University of Rome},
  title    = {HOP - Hardware-based Online Profiling of multi-threaded applications via AMD Instruction-Based Sampling},
  year     = {2018},
  type     = {mathesis},
  abstract = {Simple computing architectures are just memories. The Moore’s law is the empirical rule that predicts the electronic development for over 40 years, so accurately, that lays the "roadmap" foundations for most of the semiconductor manufacturers. Until a few decades ago, the computer architecture evolution was mainly based on the operating frequency growth, namely the speed of the processor. However, in 2003 the gap between the performance achieved by processors and the Moore’s law came up, diverting the com-
puter progression to other ways. Moore’s law is still sound. The more and more availability of transistors has been exploited to implement more sophisticated architectures, able to take advantage of polished capabilities rather than simple brute force.

Nowadays, processors are based on supercalar architectures as well as out-of-order execution engines. These not only allows achieving better instructions per clock (IPC) than scalar solutions, but also optimize the code execution through the employment of further mechanisms such as speculative computation.

Besides these core improvements, companies walks the road toward the process parallelism. This led to multi-core processors, which include more computing cores on the same chip. However, the increasing power capability on processors and the memory speed did not go hand in hand. Accessing the memory still represents a bottleneck during computation because CPU-core processing is far faster than memory operations. To overcome this speed limitation, memory elements have been directly implemented on chip such
that the communication with the processing units is subjected to smaller latency. These memories are know as cache memories which are so pervasive that their structure have been further enhanced by providing several layers, resulting, along with the main memory, in a sophisticated hierarchy. 

The high number of cores sharing memory in a single system bumped in another memory issue. As a matter of fact, the memory cannot easily handle the concurrent requests by all the cores thus becoming the main performance bottleneck in different scenarios. Non Uniform Memory Access (NUMA) systems were born from the need of coping with this ineptitude. Such systems are formed by a set of nodes which cooperate, sharing computational power and memory resources to carry out advanced system management and problem resolution.

Heterogeneous computing refers to systems that take advantage of dedicated cores to carry out specific tasks. An example of such solution is the combined work of CPUs and GPUs. They are suitable for different kinds of calculations and mixing their capabilities allows achieving several goals such as efficiency, higher performance and less power consumption. In such a complex world, modern software, for its part, tries to benefit—in the best possible way— from the underlying hardware facilities without exposing too many hardware-level details to developers.  Yet, how is it possible to find out the reason of a program behaviour when it does not act as we expected? Simple: use a profiler!

Profilers are tools specially designed for observing the execution of an application or the entire system with the aim of a profile creation. Such a profile holds the information gathered during the investigation and can be fed to external tools for further analysis. Most of the profilers are based on software techniques which, though capable of revealing a lot of execution information, may just observe high-level events also incurring in a significant overhead.
Most of the modern processors include within their architecture some specialized elements used to gather information about what is going on, atthe hardware level, during code execution. Such elements are known as Performance Monitor Units and allow to understand the reasons of several issues that may not directly recognized at higher level. Enhancing profiling tools with this support may lead to a low-overhead and more transparent software analysis.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: S. Economo},
}

@PhdThesis{tMaro20,
  author  = {Marotta, Romolo},
  school  = {Sapienza, University of Rome},
  title   = {Innovative Algorithms for Shared Data Structures in Multi-core Platforms},
  year    = {2020},
  month   = nov,
  type    = {phdthesis},
  comment = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}


@PhdThesis{tEcon20,
  author  = {Economo, Simone},
  school  = {Sapienza, University of Rome},
  title   = {Techniques and tools for program tracing and analysis with applications to parallel programming},
  year    = {2020},
  month   = nov,
  type    = {phdthesis},
  comment = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tMazz20,
  author   = {Mazziotta, Umberto},
  school   = {Sapienza, University of Rome},
  title    = {Parallel Priorities: Optimizing Priority Queues for NUMA Machines},
  year     = {2020},
  month    = jan,
  type     = {mathesis},
  abstract = {This thesis is organized as follows. In the next chapter we make an overview of the main covered concepts, and we describe the Conflict Resilient Calendar Queue, which is the priority queue we used as starting point for our solutions. Then, we provide different solutions to optimize the priority queue, showing also the results obtained in the performance evaluation, and the results against similar approaches that are found in literature. Finally, we conclude with some remarks on the work done, and other possible steps that can be done toward a further improvement of these solutions.},
  comment  = {Supervisor: A. Pellegrini - Co-Supervisor: R. Marotta},
}

@PhdThesis{tCing19,
  author   = {Cingolani, Davide},
  school   = {Sapienza, University of Rome},
  title    = {A new approach to reversible computing with applications to speculative parallel simulation},
  year     = {2019},
  type     = {phdthesis},
  abstract = {In this thesis, we propose an innovative approach to reversible computing that shifts the focus from the operations to the memory outcome of a generic program. This choice allows us to overcome some typical challenges of “plain” reversible computing. Our methodology is to instrument a generic application with the help of an instrumentation tool, namely Hijacker, which we have redesigned and developed for the purpose. Through compile-time instrumentation, we enhance the program’s code to keep track of the memory trace it produces until the end. Regardless of the complexity behind the generation of each computational step of the program, we can build inverse machine instructions just by inspecting the instruction that is attempting to write some value to memory. Therefore from this information, we craft an ad-hoc instruction that conveys this old value and the knowledge of where to replace it. This instruction will become part of a more comprehensive structure, namely the reverse window. Through this structure, we have sufficient information to cancel all the updates done by the generic program during its execution.

In this writing, we will discuss the structure of the reverse window, as the building block for the whole reversing framework we designed and finally realized. Albeit we settle our solution in the specific context of the parallel discrete event simulation (PDES) adopting the Time Warp synchronization protocol, this framework paves the way for further general-purpose development and employment. We also present two additional innovative contributions coming from our innovative reversibility approach, both of them still embrace traditional state savingbased rollback strategy. The first contribution aims to harness the advantages of both the possible approaches. We implement the rollback operation combining state saving together with our reversible support through a mathematical model. This model enables the system to choose in autonomicity the best rollback strategy, by the mutable runtime dynamics of programs. The second contribution explores an orthogonal direction, still related to reversible computing aspects. In particular, we will address the problem of reversing shared libraries. Indeed, leading from their nature, shared objects are visible to the whole system and so does every possible external modification of their code. As a consequence, it is not possible to instrument them without affecting other unaware applications. We propose a different method to deal with the instrumentation of shared objects.

All our innovative proposals have been assessed using the last generation of the open source ROOT-Sim PDES platform, where we integrated our solutions. ROOTSim is a C-based package implementing a general purpose simulation environment based on the Time Warp synchronization protocol.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@PhdThesis{tIann19,
  author   = {Ianni, Mauro},
  school   = {Sapienza, University of Rome},
  title    = {Share-everything Parallel Discrete Event Simulation on Multi-core Machines},
  year     = {2019},
  type     = {phdthesis},
  abstract = {Speculative parallel processing is a well known means to deliver high performance and scalability when executing discrete event simulation models. Nevertheless, it requires the runtime support to restore the application’s state to some past (consistent) image. Traditionally, the recoverability support has been realized via proper software layers. However, although a lot of optimizations have been provided in literature for making software-based recoverability highly efficient, its relative overhead may still represent an impairment to performance in case of (very) fine grain applications. This work presents an innovative runtime support for speculative parallel processing of discrete event simulation models on multi-core architectures, which exploits Hardware-Transactional-Memory (HTM) facilities, nowadays offered by off-the-shelf processors, for the purpose of state recoverability. In this thesis, the speculative updates on the state of the simulation model are executed as concurrent HTM-based transactions that are also in charge of detecting whether the update is consistent with the advancement of logical-time along model execution. This is achieved by including in the HTM-based transactional code-block both the activation of the application layer in charge of processing the simulation event, and the execution of housekeeping tasks aimed at determining the safety (in terms of causal consistency) of the executed transaction. This proposal is fully transparent to the application code. Hence, this HTM-based run-time support can host conventionally developed discrete event models relying on the concept of event-handlers to be dispatched by an underlying simulation engine. Experimental data show that this proposal provides 75% to 92% of the ideal speedup on an Intel Haswell based platform (equipped with 4 physical cores and HTM support) for discrete event models with event granularity ranging between 2 and 12 microseconds. The data also show that these same models cannot be executed efficiently on top of a last generation parallel discrete event simulation platform employing software-based recoverability.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tFerr19,
  author   = {Ferracci, Serena},
  school   = {Sapienza, University of Rome},
  title    = {Detecting Cache-based Side Channel Attacks using Hardware Performance Counters},
  year     = {2019},
  type     = {mathesis},
  abstract = {The remainder of this thesis is organized as follows. Chapter 2 provides an overview of optimization techniques introduced in order to speed up executions. The advantages and the disadvantages implicated by the optimization and the families of attacks that exploit them to read and/or write memory of the victim process are also discussed. Chapter 3 presents the hardware facilities used to detect the described attacks. Chapter 4 explains the methodology used to detect the attack techniques presented and how PMCs can be used for this purpose. Chapter 5 describes a possible implementation of the methodology. Finally, Chapter 6 concludes and sums up this thesis and discusses some possible future works. It discloses how our proposal can be enhanced for an extended support and possible directions for future work.},
  comment  = {Supervisor: A. Pellegrini - Co-Supervisor: S. Carnà},
}

@MastersThesis{tPicc19,
  author  = {Piccione, Andrea},
  school  = {Sapienza, University of Rome},
  title   = {An Agent-Based Simulation API for Speculative PDES Runtime Environments},
  year    = {2019},
  type    = {mathesis},
  comment = {Supervisor: A. Pellegrini},
}

@MastersThesis{tPrin18,
  author   = {Principe, Matteo},
  school   = {Sapienza, University of Rome},
  title    = {Transparent Distributed Cross-State Synchronization in Optimistic Parallel Discrete Event Simulation},
  year     = {2018},
  type     = {mathesis},
  abstract = {Parallel Discrete Event Simulation (PDES) is a powerful technique to simulate real world complex models. In fact, by sharing the workload over different machines, thus parallelizing it over different entities it is possible to satisfy the high amount of computational power and resources needed by such a kind of models. Indeed, taking advantage of this sort of organization allows to overcome both the power wall ([Sut05]) and the memory wall ([McK04]), which represent the main aspects limiting the delivery of high performance executions.

In particular, this thesis directly faces the disadvantages given by distributed memory accesses arising between Logical Processes (LPs, which are the main simulation entities representing real world objects evolving over time, [Fuj90]) while synchronizing between each other. In fact, those LPs are continuously communicating and often requesting access to portions of memory owned by
others. This scenario needs the involved (two or more) LPs to synchronize in order to ensure that the requested operation will be correctly reflected in their memory. This could lead of course to a degradation of performance, given the distributed nature of the system on top of which the  simulations are executed. The innovative technique presented in this document exploits the new kernel-level facilities in order to detect, manage and optimize the aforementioned situation, which is known as Event Cross State Synchronization (ECS).

Also, an important result reached in this work is represented by the fact that the provided solution is transparent to the final model developer in the sense that the whole job is handled by the underlying run-time environment, leveraging shared-memory accesses of the simulation state by relying on the data-sharing paradigm and executing and deploying in a seamless manner on distributed memory within clusters of multicore machines.

The whole work was developed on top of an open source, optimistic simulation platform provided by the High Performance and Dependable Computing Systems (HPDCS) research group at Sapienza, University of Rome, called ROme OpTimistic Simulator (ROOT-Sim).

The remainder of this thesis is organized as follows. In the first chapter, an overview and an explanation of the main topics of simulation and PDES is presented, focusing in particular on the environment and the choices made in this work. In Chapter 2, an introduction to the programming models of PDES is given, going through what literature proposes. Then, in Chapter 3, the proposed solution is discussed, concentrating on the specific implementation and design choices that were made in order to get the best results. Finally, Chapter 4 shows the experimental data for an assessment of the proposed solution.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tSilv17,
  author   = {Silvestri, Emiliano},
  school   = {Sapienza, University of Rome},
  title    = {Fine-Grain Time-Shared Execution of In-Memory Transactions},
  year     = {2017},
  type     = {mathesis},
  abstract = {In the early years of the past decade, the exponential growth of the sequential computing performance that has characterized the previous fifty years suffered a setback. Although the quantity of transistors on a chip continues to follow Moore’s law, it has become increasingly difficult to continue to improve the performance of sequential processors by simply raising the clock frequency, mainly due to power and cooling motivations. To remedy this situation, the industry released the so-called “multicore”, or “chip multiprocessors” systems, which provide for the presence of multiple processing units on a single chip and connected through a shared memory. In subsequent years the number of processors on a chip will increase at the Moore’s law rate, as well as the peak number of instructions executed per seconds, allowing this architecture to be the potential solution to the problem of stalled performance growth.

On the other hand, a parallel program is far more difficult to design than an equivalent sequential program, and rarely offers a significant performance increase which may be attributable to the nature of the program and the impossibility to structure it in a set of parallel independent tasks. The most real-world computational problems cannot be effectively parallelized without incurring the cost of inter-processor communication and coordination because, while parts of the program mandatory need to be performed in a serial manner, the parallel parts may also need to access shared data, which in turn require particular synchronization techniques. Parallelization and synchronization can have therefore a dominant effect on performance resulting in this way in an extremely non-linear speed-up curve tending to stall or worse. Thus, parallel programming makes more complex the programmer work with respect to the sequential one; a simple task requires much more attention in order to guarantee fundamental properties such as “safety” and “liveness”, and an approach that seems to be very good in solving a problem could give rise to bad outcomes in solving another one.

While parallelism has been a difficult problem for general-purpose programming, database systems have successfully exploited parallel hardware for decades by executing many queries concurrently on multiple processors. The author of the query does not care anymore about parallelism and has only to focus on the correctness of the query itself, leaving the hard task of ensuring atomicity, consistency, isolation and durability (A.C.I.D.) to the transactional engine that is part of the database management system (DBMS). The transaction is indeed the heart of the programming model for databases and can be expressed as a group of read and write operations performed on shared objects which must appear to be executed atomically at a single point in time, before and after the effect of other transactions running or not concurrently, in a serial one-at-a-time order. Transactions offer therefore a proven abstraction mechanism in database systems for constructing reusable parallel computations, and the advent of multicore processors has renewed interest in an old idea, that of incorporating transactions into the programming model used to write parallel programs.

This is the approach followed in Transactional Memory (TM), a paradigm that enables programmers of concurrent applications to rely on atomicity and isolation guarantees provided by some TM layer. In this thesis I will present a fully innovative mechanism enabling in-memory transactions to be executed as preemptable tasks, with preemption actuated according to very fine grain intervals. This in turn enables a single thread to exploit one CPU-core in the most effective manner with respect to different priority levels of the transactions to be processed, an issue that as not yet been tackled by any literature study.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisors: S. Economo, A. Pellegrini, P. Di Sanzo},
}

@MastersThesis{tCono17,
  author   = {Conoci, Stefano},
  school   = {Sapienza, University of Rome},
  title    = {Efficient Software Transactional Memory via Thread Scheduling and Dynamic Voltage and Frequency Scaling},
  year     = {2017},
  type     = {mathesis},
  abstract = {Transactional memory is a interesting parallel programming paradigm that offers the scalability of fine-grained locking without the need of handcrafted synchronization. It relies on the concept of atomic transactions that might commit or abort depending on the interleaving of operations on shared data. However, an excessive number of aborts could lead to performance degradation and wasted energy. Recently, there has been interest in the performance and energy optimization of transactional memory with techniques like thread scheduling [1, 2]. However, there are not yet studies that explore the energy efficiency and performance trade-offs obtainable when running transactional applications at lower energy CPU states. In this work we investigate the performance and energy efficiency of two current generation systems executing transactional applications with different configurations of parallel threads and CPU frequency and voltage. The results of this investigation are exploited to develop an architecture for the efficient execution of transactional applications. It is based on exploration heuristics that can efficiently select at run-time the configuration that provide the highest performance while operating withing user defined constraints on power and energy consumption. This thesis is organized as follows. In Chapter 1 we provide an overview of concurrent programming, transactional memories and we characterize the energy consumption of modern computing system. Chapter 2 contains a brief summary of the present state of the art of the performance and energy optimization of transactional memories. In Chapter 3 we perform an in-depth analysis of the performance and energy efficiency of transactional applications running with different configurations of parallel threads and CPU energy states. In Chapter 4 we present the proposed architecture, the exploration heuristics and we show the trade-offs obtainable with different constraints on power and energy consumption. Chapter 5 concludes this work with a brief summary of the achieved results},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: P. Di Sanzo},
}

@MastersThesis{tRivi17,
  author   = {Rivieccio, Salvatore},
  school   = {Sapienza, University of Rome},
  title    = {Energy Efficient Spin-Locking in Multi-Core Machines},
  year     = {2017},
  type     = {mathesis},
  abstract = {In this thesis I will show an implementation of spin-locks that works in an energy efficient fashion, exploiting the capability of last generation hardware and new software components in order to rise or reduce the CPU frequency when running spinlock operation. In particular this work consists in a linux kernel module and a user-space program that make possible to run with the lowest frequency admissible when a thread is spin-locking, waiting to enter a critical section. These changes are thread-grain, which means that only interested threads are affected whereas the system keeps running as usual. Standard libraries’ spinlocks do not provide energy efficiency support, those kind of optimizations are related to the application behaviors or to kernel-level solutions, like governors.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: P. Di Sanzo},
}

@MastersThesis{tScar17,
  author   = {Scarselli, Andrea},
  school   = {Sapienza, University of Rome},
  title    = {A Lock-Free Buddy System for Scalable Memory Allocation},
  year     = {2017},
  type     = {mathesis},
  abstract = {In the last years the time of easy performance gaining is ended due to a physical constraint called Power Wall. In this scenario, the large diffusion of shared-memory multi-core machines offers a new opportunities to face the increasing demand for improved performance. Anyhow, common lock-based synchronization techniques could be deleterious for performances and frustrate the presence of the increasing number of cores.

In order to optimize parallel execution, the non-blocking synchronization paradigm, based on the exploitation of Read-Modify-write (RMW) instructions, was born. This new technique requires a deep knowledge of the underlying hardware capabilities and on the assumptions that can be made on it.

On the other hand, the memory allocation problem is still relevant to support fast execution of both system and user applications.

An efficient allocator is required to avoid memory requests to become a bottleneck in high-performance scenarios characterized by large amount of processes. Moreover, requests could be very different depending on the target application; a good memory allocator has to works well in as many as possible scenarios.

In this work I present the design and the implementation of a lock-free buddy system memory allocator based on a binary tree structure. The proposed algorithm offers great performances in highly parallel machines and it is very memory efficient, producing low data overhead to work.

The results obtained in the experiments confirm the actual scalability of this proposal and the effectiveness of the lock-free synchronization.},
  comment  = {Supervisor: B. Ciciani - Co-Supervisor: F. Quaglia, M. Ianni, R. Marota},
}

@MastersThesis{tTocc17,
  author   = {Tocci, Tommaso},
  school   = {Sapienza, University of Rome},
  title    = {ORCHESTRA: An Asynchronous Wait-Free Distributed GVT Algorithm},
  year     = {2017},
  type     = {mathesis},
  abstract = {Taking advantage of computing capabilities oered by modern parallel and distributed architectures is fundamental to run large-scale simulation models based on the Parallel Discrete Event Simulation (PDES) paradigm. By relying on this computing organization, it is possible to eectively overcome both the power and the memory wall, which are core limiting aspects to deliver high-performance simulations. This is even more the case when relying on the speculative Time Warp synchronization protocol, which could be particularly memory greedy. At the same time, some form of coordination, such as the computation of the Global Virtual Time (GVT), is required by Time Warp Systems. These coordination points could easily become the bottleneck of large-scale simulations, hindering an efficient exploitation of the computing power oered by large supercomputing facilities. In this dissertation is presented ORCHESTRA, a coordination algorithm which is both wait-free and asynchronous. The nature of this algorithm allows any computing node to carry on simulation activities while the global agreement is reached, thus oering an eective building block to achieve scalable PDES. The general organization of ORCHESTRA could be adopted by different high-performance computing applications, thus paving the way to a more effective usage of modern computing infrastructures.},
  comment  = {Supervisor: B. Ciciani - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tMaro16,
  author  = {Marotta, Romolo},
  school  = {Sapienza, University of Rome},
  title   = {A Lock-Free O(1) Priority Queue for Pending Event Set Management},
  year    = {2016},
  type    = {mathesis},
  comment = {Supervisor: F. Quaglia - Co-Supervisors: P. Di Sanzo, A. Pellegrini},
}

@MastersThesis{tMarz16,
  author   = {Marziale, Nazzareno},
  school   = {Sapienza, University of Rome},
  title    = {Dynamic Clustering of Simulation Objects in Speculative Parallel Simulation Systems},
  year     = {2016},
  type     = {mathesis},
  abstract = {This thesis is organized as follow: Chapter 2 presents all works related to the one discussed in the thesis and the different implementations developed to solve this problem. Chapter 3, we explain more in detail the simulator on which the solution is implemented. The work conducted in this thesis is explained thoroughly in Chapter 4 and Chapter 5 we expose the results of tests and the improvements observed. Finally, in Chapter 6 we explain the conclusions that have been reached.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tNobi16,
  author   = {Nobilia, Francesco},
  school   = {Sapienza, University of Rome},
  title    = {Runtime Management of Simulation Objects Cross-State Dependencies in NUMA-oriented Parallel Simulation Platforms},
  year     = {2016},
  type     = {mathesis},
  abstract = {Nowadays, the well acceptable solution for speeding-up and making very large and complex simulation models tractable is the parallelDES (PDES) paradigm. In a speculative environment two simulation entities with different simulation times can reach the same portion of simulation state at the same wall-clock time. In this case the system has to manage their accesses always guaranteeing state coherence. For copying with this issue the entire model has been partitioned into distinct Logical Processes (LPs): each LP handles and models a portion of the whole simulated environment/phenomenon, and interacts with others by means of time-stamped event messages (local causality constraint). The reasons behind this disjunction are only technical. They impose a coding style that prevents the possibility that some LP can directly manage more than one state at a time. The purpose of this work is answering to the question raised by Fujimoto whether building a shared state system by using messages only is the natural way to program simulation. Our solution is based over the concept that each LP can directly access the state of any other LP by means of synchronization phase. This behaviour is achieved setting-up each simulation object over a parallel memory view. Further, given that modern parallel machines are organized according to the Non-Uniform-Memory-Accesss (NUMA) model, we also provide approaches for making the access to memory slices associated with the parallel memory view efficient in NUMA systems. We augment the ROme OpTimistic Simulator (ROOTSim) with our proposal and we use this environment as test-bed. Finally, we demonstrate how our approach improves the simulation performance.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tIann15,
  author   = {Ianni, Mauro},
  school   = {Sapienza, University of Rome},
  title    = {Transactional Memory Based Speculative Parallel Execution of Discrete Event Applications},
  year     = {2015},
  type     = {mathesis},
  abstract = {Speculative parallel processing is a well known means to deliver high performance and scalability when executing discrete event simulation models. Nevertheless, it requires the runtime support to restore the application’s state to some past (consistent) image. Traditionally, the recoverability support has been realized via proper software layers. However, although a lot
of optimizations have been provided in literature for making software-based recoverability highly efficient, its relative overhead may still represent an impairment to performance in case of (very) fine grain applications. This work presents an innovative runtime support for speculative parallel processing of discrete event simulation models on multi-core architectures, which exploits Hardware-Transactional-Memory (HTM) facilities, nowadays offered by offthe-shelf processors, for the purpose of state recoverability. In this thesis, the speculative updates on the state of the simulation model are executed as concurrent HTM-based transactions that are also in charge of detecting whether the update is consistent with the advancement of logical-time along model execution. This is achieved by including in the HTM-based transactional code-block both the activation of the application layer in charge of processing the simulation event, and the execution of housekeeping tasks aimed at determining the safety (in terms of causal consistency) of the executed transaction. This proposal is fully transparent to the application code. Hence, this HTM-based run-time support can host conventionally developed discrete event models relying on the concept of event-handlers to be dispatched by an underlying simulation engine. Experimental data show that this proposal provides 75% to 92% of the ideal speedup on an Intel Haswell based platform (equipped with 4 physical cores and HTM support) for discrete event models with event granularity ranging between 2 and 12 microseconds. The data also show that these same models cannot be executed efficiently on top of a last generation parallel discrete event simulation platform employing software-based recoverability},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tEcon15,
  author   = {Economo, Simone},
  school   = {Sapienza, University of Rome},
  title    = {Lightweight approximate virtual page access tracing of multi-threaded applications via static binary instrumentation},
  year     = {2015},
  type     = {mathesis},
  abstract = {This thesis is structured as follows. Chapter 2 provides an overview of instrumentation techniques and existing tools. It will then focus on static binary instrumentation and Hijacker, a C toolkit designed to achieve general-purpose static instrumentation through lightweight and non-intrusive injection techniques. Chapter 3 builds on the concepts presented in the previous chapter to give a general perspective on the memory access tracing problem, as well as the most important techniques employed in the literature. Chapter 4 is the heart of this thesis and explains how one can solve the problem of tracing virtual pages by leveraging on finergrained memory tracing techniques. Chapter 5 provides the reader with an experimental and quantitative justification of the goodness of my approach in terms of instrumentation overhead and tracing accuracy. Finally, chapter 6 lays out the conclusions of this thesis and anticipates possible directions for future work.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tRizz15,
  author   = {La Rizza, Andrea},
  school   = {Sapienza, University of Rome},
  title    = {Elastic cloud resources provisioning for life insurance undertaking applications},
  year     = {2015},
  type     = {mathesis},
  abstract = {The Solvency II Directive (Directive 2009/138/EC) [14] is a European law adopted in November 2009, and amended by Directive 2014/51/EU of the European Parliament and of the Council of 16 April 2014 (the so-called "Omnibus II Directive"). It was enacted by the European Union to regulate the insurance sector through risk management. Solvency II requires that European insurance companies conduct consistent evaluations and constant monitoring of risk. The main regulation requires the insurance undertaking to compute the SCR (Solvency Capital Requirement) and the pdf (Probability Distribution Forecast). The SCR is the capital amount that should hedge the losses up to a given level. To calculate the SCR the directive allows the company to choose between two different computational methodology: the standard formula and the internal model. The pdf is a mathematical function that assigns to an exhaustive set of mutually exclusive future events a probability of realisation. Its computation relies on non closed form calculus based on several Monte Carlo simulations and different hypothesis.

To fulfill the directives, companies should equip themselves with particular computational systems which, due to their complexity, require for their execution significant underlying IT infrastructures. This IT equipments represent a significant outlay for the company, not only for what concerns their direct costs due to the purchase, but also those for power consumption, cooling, maintenance and upgrades. Moreover, the technological progress that characterizes the IT field makes these computing resources become obsolete quickly. On the other hand, we face the risk that such resources become underused since these procedures could be used only periodically (at most monthly). If for the insurance company the utilization of "on premises" resources may not be advantageous, for a cloud services provider, increasing steadily its resources, leads to reduce the costs and consequently reduce the rates charged to the user.

The idea of this work is to put together the needs arising from Solvency II accomplishment with the always more advantageous scenario of cloud services. Within the project, as a case study, the focus is on a particular "module" of a more complex system named DISAR® 1
, that deals with the calculation of the pdf and other significant items for an insurance company. This procedure relies on a Monte Carlo simulation algorithm developed on parallel MPI environment. The goal of the project is to develop a framework that, by exploiting a learning algorithm is able to: calculate the computational power and the size of the IT infrastructure necessary for the execution of the procedure for a given input, deploy and make it available in a few minutes on the cloud, transfer to the grid the data necessary to the simulation, execute it and retrieve the output in a fully automated way transparent to the final user. The
latter has the only task of choosing the segregated funds the to work on. Moreover after each elaboration, the data relative to it are stored and subsequently utilized to improve the model for the next simulation. The cloud services provider adopted for this project is Amazon Web Services (AWS), however the core algorithm as the methodology can be applied independently of the provider.},
  comment  = {Supervisor: B. Ciciani - Co-Supervisors: A. Pellegrini},
}

@MastersThesis{tFort15,
  author   = {Forte, Luca},
  school   = {Sapienza, University of Rome},
  title    = {Proactive Workload Management in Cloud Environments in the Presence of Software Aging},
  year     = {2015},
  type     = {mathesis},
  abstract = {This work is structured as follows. In Chapter 2 it will be discussed related work. In Chapter 3 presents the problems related to the software aging. Chapter 4 discusses the ML-based frameworks used in this works. The design and the  umplementation choices of this framework are discussed Chapter 5. Chapter 6 shows the experimental evaluation and the Chapter 7 draws the conclusions.},
  comment  = {Supervisor: B. Ciciani - Co-Supervisors: P. Di Sanzo, A. Pellegrini},
}

@MastersThesis{tScar15,
  author   = {Scarselli, Andrea},
  school   = {Sapienza, University of Rome},
  title    = {Gestione ottimizzata della delivery e del buffering dei messaggi in piattaforme multi-thread in architetture NUMA},
  year     = {2015},
  type     = {bathesis},
  abstract = {In questo lavoro presento l’ideazione e la realizzazione in C di un allocatore e gestore di memoria finalizzato allo scambio di messaggi in un software di tipo Parallel Discrete Event Simulation (PDES). L’allocatore è stato progettato e realizzato per essere eseguito su una macchina con architettura di tipo Non Uniform Memory Access (NUMA).},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@PhdThesis{tPell14,
  author   = {Pellegrini, Alessandro},
  school   = {Sapienza, University of Rome},
  title    = {Techniques for Transparent Parallelization of Discrete Event Simulation Models},
  year     = {2014},
  type     = {phdthesis},
  abstract = {Simulation is a powerful technique to represent the evolution of real-world phenomena or systems over time. It has been extensively used in different research fields (from medicine to biology, to economy, and to disaster rescue) to study the behaviour of complex systems during their evolution (symbiotic simulation) or before their actual realization (what-if analysis). A traditional way to achieve high performance simulations is the employment of Parallel Discrete Event Simulation (PDES) techniques, which are based on the partitioning of the simulation model into Logical Processes (LPs) that can execute events in parallel on different CPUs and/or different CPU cores, and rely on synchronization mechanisms to achieve causally consistent execution of simulation events. As it is well recognized, the optimistic synchronization approach, namely the Time Warp protocol, which is based on rollback for recovering possible timestamporder violations due to the absence of block-until-safe policies for event processing, is likely to favour speedup in general application/architectural contexts.

However, the optimistic PDES paradigm implicitly relies on a programming model that shifts from traditional sequential-style programming, given that there is no notion of global address space (fully accessible while processing events at any LP). Furthermore, there is the underlying assumption that the code associated with event handlers cannot execute unrecoverable operations given their speculative processing nature. Nevertheless, even though no unrecoverable action is ever executed by event handlers, a means to actually undo the action if requested needs to be devised and implemented within the software stack.

On the other hand, sequential-style programming is an easy paradigm for the development of simulation code, given that it does not require the programmer to reason about memory partitioning (and therefore message passing) and speculative (concurrent) processing of the application. In this thesis, we present methodological and technical innovations which will show how it is possible, by developing innovative runtime mechanisms, to allow a programmer to implement his simulation model in a fully sequential way, and have the underlying simulation framework to execute it in parallel according to speculative processing techniques. Some of the approaches we provide show applicability in either shared- or distributed-memory systems, while others will be specifically tailored to multi/many-core architectures.

We will clearly show, during the development of these supports, what is the effect on performance of these solutions, which will nevertheless be negligible, allowing a fruitful exploitation of the available computing power. In the end, we will highlight which are the clear benefits on the programming model that the model developer will experience by relying on these innovative solutions.},
  comment  = {Supervisor: F. Quaglia},
}

@PhdThesis{tPelu14,
  author   = {Peluso, Sebastiano},
  school   = {Sapienza, University of Rome},
  title    = {Efficient Protocols for Replicated Transactional Systems},
  year     = {2014},
  type     = {phdthesis},
  abstract = {Over the last years several relevant technological trends have significantly increased the relative impact that the inter-replica synchronization costs have on the performance of transactional systems. Indeed, the emergence of technologies like Transactional Memory, Solid-State Drives and Cloud computing has exacerbated the ratio between the latencies of replication coordination and transaction processing. The requirements of these environments harshly challenge state of the art techniques for replication of transactional systems, raising the need for rethinking existing approaches to this problem.

This dissertation advances the state of the art on replicated transactional systems by presenting a set of innovative replication protocols designed to achieve high efficiency even in such challenging scenarios. 

More in detail, four transactional replication protocols are proposed, which tackle the aforementioned issues from various angles. The first two cope with full replication scenarios, and exploit orthogonal techniques, such as speculation and transaction migration, which allow for amortizing, in different ways, the impact of distributed coordination on system performance. The other two proposals explicitly cope with the issue of scalability, by introducing the first genuine partial replication techniques that support abort-free read-only transactions while ensuring, respectively, One-Copy Serializability and Extended Update Serializability. The core of these protocols is a distributed multi-version concurrency control algorithm, which relies on a novel logical clock synchronization mechanism to track, in a totally decentralized (and consequently scalable) way, both data and causal dependency relations among transactions. The trade-offs arising across the different presented solutions are also discussed and experimentally evaluated by integrating them into state of the art academic and industrial transactional platforms.},
  comment  = {Supervisors: F. Quaglia, P. Romano},
}

@PhdThesis{tRugh14,
  author   = {Rughetti, Diego},
  school   = {Sapienza, University of Rome},
  title    = {Autonomic Concurrency Regulation in Software Transactional Memories},
  year     = {2014},
  type     = {phdthesis},
  abstract = {Software Transactional Memory (STM) has emerged as a powerful programming paradigm for concurrent applications. It allows encapsulating the access to data shared across concurrent threads within transactions, thus avoiding the need for synchronization mechanisms to be explicitly coded by the programmer. On the other hand, synchronization transparency must not come the expense of performance. Hence, STM-based systems must be enriched with mechanisms providing optimized run-time efficiency. Among the issues to be tackled, a core one is related to determining the optimal level of concurrency (number of threads) to be employed for running the application on top of the STM layer. For too low levels of concurrency, parallelism can be hampered. On the other hand, overdimensioning the concurrency level may give rise to thrashing phenomena caused by excessive data contention and consequent transaction aborts.

In this thesis we propose a set of techniques in order to build “application specific” performance models allowing to dynamically tune the level of concurrency to the best suited value depending of the specific execution phase of the application. We will present three different approaches: a) one based on a pure Machine Learning (ML) model that doesn’t require a detailed knowledge of the application internals to predict the optimal concurrency level, b) one based on a parametric analytical performance model customized for a specific application/platform through regression analysis that, respect to the previous one, requires a lighter training phase and c) one based on a combination of analytical and Machine Learning techniques, that allows to combine the strengths of the previous
two approaches, that is it has the advantage of reducing the training time of pure machine learning methods avoiding the approximation errors typically affecting pure analytical approaches. Hence it allows very fast construction of highly reliable performance models, which can be promptly and effectively exploited for optimizing actual application runs.

We also present real implementations of concurrency regulation architectures, based on our performance predictions approaches, which have been integrated within the open source TinySTM package, together with experimental data related to runs of application profiles taken from the STAMP benchmark suite demonstrating the effectiveness of our proposals. The experimental data confirm how our self-adjusting concurrency schemes constantly provides optimal performance, thus avoiding performance loss phases caused by non-suited selection of the amount of concurrent threads and associated with the above depicted phenomena.

Moreover we present a mechanism that allows to dynamically shrinks or enlarges the set of input features to be exploited by the performance predictors. This allows for tuning the concurrency level while also minimizing the overhead for input-features sampling, given that the cardinality of the input-feature set is always tuned to the minimum value that still guarantees reliability of workload characterization. We also present a fully fledged implementation of this solution again within the TinySTM open source framework, and we provide the results of an experimental study relying on the STAMP benchmark suite, which show significant reduction of the application execution time with respect to proposals based on static feature selection.},
  comment  = {Supervisor: B. Ciciani},
}

@MastersThesis{tCing14,
  author   = {Cingolani, Davide},
  school   = {Sapienza, University of Rome},
  title    = {Application Transparent and Efficient Mixed State-Saving in Speculative Simulation Platforms},
  year     = {2014},
  type     = {mathesis},
  abstract = {In this thesis we focus on devising a reverse code generator and on its integration with speculative simulation platforms, and specifically for Parallel Discrete Event Simulation (PDES). Speculative simulation platforms usually require a considerable storage allocation to model the reality and to store partial results, which further experience several update per time; nonetheless, the optimistic slant increases the likelihood of rollbacks. Simulation processes exhibit CPU-intensive burst loads too, representing a perfect field of application to test our approach in all the possible cases at once. Simulation is a problem-solving technique to cope with complex mathematical models generally conceived from real (or hypothetical) phenomena, which are non-trivially reproducible otherwise. Simulation applications handle a considerable number of parallel/distributed objects interacting together by message passing. Each object is a logical entity which relies on the virtual time concept, processing the incoming messages. The event-based simulation enforces equivalency between those messages and the relative triggered events. Unlike other structured processes, speculative simulation adopts optimistic heuristics, which allow to perform scheduled events even if they are not safe. Event safety straightway depends on actual processing events order with respect to global causality relationship they have been sent with. Optimistic approach looses event processing constraints and exploits much better computational resources, nevertheless it might bring the system to violate the causal order, bringing the simulation to an inconsistent state. The more complex simulation model is, the more likely it requires to rollback out-of-order events. So far the most consolidated way is to employ checkpointing techniques, which though exhibit considerable memory overhead and time latency as the simulation model gets more complex.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@PhdThesis{tVita13,
  author   = {Vitali, Roberto},
  school   = {Sapienza, University of Rome},
  title    = {Design of Software Support Structures for High Performance Optimistic Simulations with Special Focus on Multi-Core Hosting Environment},
  year     = {2013},
  type     = {phdthesis},
  abstract = {In this dissertation we cope with performance of PDES  systems, with special focus on deploys of the PDES platform onto multi-core architectures. These architectures represent the current CPU trend and nowadays it is common to have chips with a significant number of cores, sometimes enough for effectively performing parallel computations within a single chip. By design, these architectures share most of the CPU internal components across different cores, and physical memory across the different CPUs. This implies several drawbacks, mainly due to the contention, but at the same time, such a sharing can become a resource, if well exploited through sector specific software design. The base building block for our work is the optimistic PDES synchronization paradigm, which has been shown to be highly promising in terms of potential for fruitful parallelism exploitation},
  comment  = {Supervisor: F. Quaglia},
}

@PhdThesis{tDiSa12,
  author   = {Di Sanzo, Pierangelo},
  school   = {Sapienza, University of Rome},
  title    = {Performance Models of Concurrency Control Protocols for Transaction Processing Systems},
  year     = {2012},
  type     = {phdthesis},
  abstract = {In this dissertation we present performance models of CCPs for transaction processing systems. Primarily, we use an analytical approach. Further, we also use detailed simulation models to evaluate the accuracy of the analytical models we propose, and to analyze some features of the protocols we deal with. We preferred to focus mainly on the analytical approach for two main reasons: (1) analytical modeling can be a practical approach for building cost-effective computer system performance models and, in particular, (2) the analytical approach enables to quantitatively describe the complex dynamics characterizing the concurrency control, allowing us to analyze and understand existing dependencies between system performance indicators and other system configuration parameters, and to reason about their implications. In this work, we deal with both Database Systems (DBS) and Software Transactional Memories (STMs), which represent traditional and emerging transaction processing systems, respectively},
  comment  = {Supervisor: B. Ciciani},
}

@PhdThesis{tPalm12,
  author   = {Palmieri, Roberto},
  school   = {Sapienza, University of Rome},
  title    = {Speculative Protocols for Actively Replicated Transactional Systems},
  year     = {2012},
  type     = {phdthesis},
  abstract = {Nowadays, the role of transactions has become twofold:
- they are used in order to guarantee consistency and atomicity in applications manipulating data;
- they are used as a means to synchronize the activities of threads working concurrently within any software layer.

Overall, the concept of transaction, historically related to support data manipulation in the context of database systems, has been widened so to encapsulate synchronization aspects in the context of parallel and concurrent applications. The latter aspect found its expression via Software Transactional Memory (STM) technologies, which have been oriented to mask the complexity of synchronization to the application programmers, thus moving along the path of bringing the power of multi/many-core architectures into the hand of ordinary, non-specialized, software developers. Such a widened scope of transactions, together with significant technological innovations possibly impacting the execution profile/cost of traditional database transactions (e.g. the advent of SSD storage systems) and the level of transaction parallelism (e.g. the advent of many-core architectures), raise the need for reconsidering the design of protocols supporting fault tolerance.

In this thesis, I focus on fault tolerant protocols based on the active replication paradigm, which is done by systematically exploiting speculative computation approaches. More in detail, I worked on innovative speculative transactional replication protocols relying on Optimistic Atomic Broadcast group communication primitives, which have been used as a building block for replicas coordination. Some proposed results are mostly oriented to theory, while others have a more strict relation with pragmatic aspects associated with the design/implementation of replicated transactional systems.},
  comment  = {Supervisor: F. Quaglia},
}

@MastersThesis{tStro12,
  author   = {Stroia, Pietro},
  school   = {Sapienza, University of Rome},
  title    = {Securing the IDT and the System Call Table from malicious LKMs},
  year     = {2012},
  type     = {mathesis},
  abstract = {Provided that loadable kernel modules (LKMs) run at ring 0, is it really possible to prevent kernel-level attacks once the evil code has started its execution? Without a hypervisor, or some kind of virtualization technology (e.g. VT-x), results in general have not been proved very successful, as Microsoft’s Patchguard technology has shown in the past years.

My thesis, which provides a patch for the Linux kernel version 3.2.51, aims at providing a security mechanism against synchronous malicious LKMs, or, in other words, LKMs that execute their attack in their initialization phase, without deferring any work. Although the patch code is for an IA-32 compatible Linux system only, there are no major obstacles in porting the code to other operating systems that support LKMs and run at least on the 80386 architecture. The rationale behind this work is that I personally had the “feeling” I could puzzle simple evil LKMs and let them believe they had successfully executed their attack, without using any kind of virtualization technology. The work, named the “YASI patch”, is to be intended as a small “proof-of-concept” running on top of an already secured system.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisor: A. Pellegrini},
}

@MastersThesis{tPorf11,
  author   = {Porfirio, Alice},
  school   = {Sapienza, University of Rome},
  title    = {Progettazione e implementazione di un meccanismo di rollback parziale per memorie software transazionali},
  year     = {2011},
  type     = {mathesis},
  abstract = {L’obiettivo di questo lavoro è la progettazione e l’implementazione di un meccanismo che permetta il rollback parziale di transazioni nell’ambito delle memorie software transazionali. Per rollback parziale dopo l’abort di una transazione si intenda la ripresa dell’esecuzione del codice non dall’inizio di essa, bensì dal punto in cui è avvenuta l’incoerenza. Questo permetterebbe di salvare la parte del lavoro eseguita prima dell’occorrenza del problema, avendo potenziali effetti positivi sui costi in termini di tempo.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisors: P. Di Sanzo, A. Pellegrini},
}

@MastersThesis{tCera11,
  author  = {Cerasuolo, Gionata},
  school  = {Sapienza, University of Rome},
  title   = {Cache-Aware Memory Manager for Optimistic Simulations},
  year    = {2011},
  type    = {mathesis},
  comment = {Supervisor: F. Quaglia - Co-Supervisors: A. Pellegrini, R. Vitali},
}

@MastersThesis{tVisc11,
  author   = {Visca, Fernando},
  school   = {Sapienza, University of Rome},
  title    = {Tecniche di instrumentazione statica per il supporto alla trasparenza verso il programmatore nelle STM},
  year     = {2011},
  type     = {bathesis},
  abstract = {Il presente lavoro riguarda la trasparenza al programmatore nel progetto di applicazioni basate su sistemi Software Transactional Memory (STM). Più in dettaglio, si vuol far sì che, durante la scrittura di applicazioni basate su STM, sia possibile, per le operazioni su memoria (i.e., letture e scritture), utilizzare i costrutti messi a disposizione dal linguaggio di programmazione scelto astraendo da qualsiasi riferimento alle funzioni di lettura/scrittura messe a disposizione dall’implementazione STM e dalla loro logica di funzionamento.},
  comment  = {Supervisor: F. Quaglia - Co-Supervisors: A. Pellegrini, R. Palmieri},
}

@MastersThesis{tPell10,
  author   = {Pellegrini, Alessandro},
  school   = {Sapienza, University of Rome},
  title    = {Salvataggio e Ripristino Autonomico dello Stato degli Oggetti nei Sistemi di Simulazione Ottimistici},
  year     = {2010},
  type     = {mathesis},
  abstract = {In questo lavoro viene affrontato il problema del ripristino dello stato nei sistemi di simulazione ottimistica, con la proposta di un’architettura di gestione dei checkpoint, progettata secondo il paradigma del calcolo autonomico. La proposta `e unica, nel senso che affronta contemporaneamente le questioni di trasparenza e performance, offrendo allo stesso tempo le seguenti caratteristiche:

1. le operazioni di salvataggio e ripristino dello stato vengono condotte in maniera del tutto trasparente al programmatore del livello applicativo;
2. lo stato degli oggetti di simulazione pu`o essere distribuito su frammenti di memoria non contigui;
3. il salvataggio ed il ripristino dello stato possono essere eseguiti secondo uno schema incrementale o non incrementale;
4. la selezione dello schema migliore viene effettuata a tempo d’esecuzione, utilizzando un approccio innovativo di modellazione ed ottimizzazione, che si basa sulla capacit`a di catturare fluttuazioni nelle dinamiche d’esecuzione},
  comment  = {Supervisor: F. Quaglia},
}

@MastersThesis{tPelu10,
  author  = {Peluso, Sebastiano},
  school  = {Sapienza, University of Rome},
  title   = {missing record},
  year    = {2010},
  type    = {mathesis},
  comment = {Supervisor: F. Quaglia},
}

@MastersThesis{tDido10,
  author  = {Didona, Diego},
  school  = {Sapienza, University of Rome},
  title   = {missing record},
  year    = {2010},
  type    = {mathesis},
  comment = {Supervisor: F. Quaglia},
}

@MastersThesis{tVita08,
  author  = {Vitali, Roberto},
  school  = {Sapienza, University of Rome},
  title   = {missing record},
  year    = {2008},
  type    = {mathesis},
  comment = {Supervisor: F. Quaglia},
}

@MastersThesis{tRugh08,
  author   = {Rughetti, Diego},
  school   = {Sapienza, University of Rome},
  title    = {Raccolta ed elaborazione di dati provenienti da reti di sensori distribuiti},
  year     = {2008},
  type     = {mathesis},
  abstract = {La tesi risulta essere così strutturata: nel capitolo 2 viene data una descrizione approfondita della tecnologia rfid e vengono illustrati alcuni casi di studio relativi al suo utilizzo; nel capitolo 3 vengono presentate una serie di astrazioni per sistemi distribuiti; nel capitolo 4 vengono descritti una serie di strumenti/framework utilizzate durante il processo di progettazione e sviluppo del middleware; il capitolo 5 fornisce una descrizione dettagliata dell'architettura di quest'ultimo e descrive il suo modello di programmazione; nel capitolo 6 vengono studiate le possibili tecniche di replicazione basate su active replication utilizzabili per rendere il middleware fault tolerant e viene illustrato approfonditamente un protocollo innovativo Post Synchronized Active Replication Protocol, per la sincronizzazione dello stato delle repliche; infine nel capitolo 7 forniamo una serie di conclusioni basate sui risultati sperimentali.},
  comment  = {Supervisor: B. Ciciani - Co-Supervisor: P. Romano},
}

@MastersThesis{tPalm08,
  author   = {Palmieri, Roberto},
  school   = {Sapienza, University of Rome},
  title    = {Modellazione e valutazione di DBMS relazionali basati su lock e pattern di accesso non uniformi},
  year     = {2008},
  type     = {mathesis},
  abstract = {In questo lavoro verranno analizzati i protocolli basati su strategie di locking ed in particolare sul protocollo del 2PL (Two Phase Locking). In letteratura questa famiglia di protocolli basata su locking è stata molto trattata in vari studi, ma in questo lavoro la modellazione di tali protocolli verrà specializzata e quindi approfondita nella caratterizzazione del carico di lavoro (workload) del DBMS. Il carico di lavoro è un insieme di parametri che descrivono le condizioni di funzionamento di un sistema. In letteratura non è attualmente presente un lavoro che considera come parametro fondamentale del carico di lavoro il pattern di accesso ai dati da parte delle transazioni. In questo lavoro si cercherà di dimostrare come la caratterizzazione della modalità con la quale le transazioni accedono ai dati influenza pesantemente i tempi di risposta del sistema e quindi un degrado delle prestazioni. Questo tipo di caratterizzazione del carico è già presente all’interno di alcuni benchmark di riferimento per sistemi transazionali come TCP-C, quindi un possibile terreno fertile per l’applicazione del modello studiato nei capitoli successivi},
  comment  = {Supervisor: B. Ciciani},
}

@MastersThesis{tPell08,
  author   = {Pellegrini, Alessandro},
  school   = {Sapienza, University of Rome},
  title    = {Tracciamento trasparente ed efficiente di scritture su memoria dinamica con granularità arbitraria in architetture per il calcolo ottimistico},
  year     = {2008},
  type     = {bathesis},
  abstract = {In questo lavoro presento l’ideazione, il progetto e l’implementazione in linguaggio C ed Assembly di un sistema di tracciamento di accessi su memoria dinamica in architetture per il calcolo ottimistico. Questo progetto si pone l’obiettivo di sviluppare una metodologia per l’identificazione a run-time di quali aree di memoria siano soggette ad operazioni di scrittura con granularità e dimensione arbitraria, in maniera disgiunta da qualsiasi libreria. In questo modo è possibile operare anche in contesti di memoria allocata dinamicamente, tramite librerie standard (quali malloc). Scopo parallelo del progetto è quello di realizzare un'implementazione di questa metodologia, che permetta un'esecuzione del software applicativo soggetta ad un overhead minimo rispetto a quello che normalmente avrebbe.},
  comment  = {Supervisor: F. Quaglia},
}

@PhdThesis{tRoma07,
  author   = {Romano, Paolo},
  school   = {Sapienza, University of Rome},
  title    = {Protocols for End-To-End Reliability in Multi-Tier Systems},
  year     = {2007},
  type     = {phdthesis},
  abstract = {Modern Internet services exhibit the strong trend to be structured according to a three-tier, and in general multi-tier, system organization, which allows reflecting at both the software and hardware level the logical decomposition of applications. Even though the partitioning of the application into multiple tiers provides the potentialities to achieve high modularity and flexibility, the multiplicity and diversity of the employed components, and their interdependencies, make reliability a complex issue to tackle. As an example, in classical client-server environments, database systems represented the reliability backbone of mission critical services, ensuring consistent evolution of the state trajectory of business applications through the notion of atomic transactions. However, the fault-tolerance capabilities provided by transactional components, and, in broader sense, by traditional approaches to reliability, address issues restricted to specific subsystems involved in the end-to-end interaction. Hence, they are unable to tackle the wide spectrum of failure scenarios that can arise along the whole chain of components constituting a multi-tier system.

The design of reliability solutions for Internet services is made even more challenging by the open, heterogeneous and inherently asynchronous nature of the Internet itself, which dramatically reduces the possibility to monitor and control the distributed components involved in a multi-tier application. Further, coupled with global access enabled by the Internet and with widespread diffusion of complex services, the urge for achieving high scalability and minimizing response times has accordingly grown. This has imposed stringent performance requirements on the underlying reliability mechanisms.

This is precisely the focus of this thesis. Specifically, we introduce innovative protocols ensuring the e-Transaction (exactly-once Transaction) guarantees, namely a recent formalization of desirable end-to-end reliability properties for multi-tier systems in presence of crash failures. These protocols advance the state of the art in a twofold direction. From a practical perspective, they achieve unparalleled scalability levels, exhibit very limited overhead, thus revealing particularly attractive in the context of emerging large scale service delivery platforms. From a theoretical standpoint, our solutions can cope with purely asynchronous systems, where no assumption on the accuracy of the failure detection mechanism can be guaranteed.

As we will show, some of the building blocks underlying the previous fault tolerant protocols can also be used to construct distributed protocols allowing the treatment of a more general class of failures, which we can refer to as “performance failures”. These model situations of reduced system responsiveness due to both crashes and overloads/congestions on some component.},
  comment  = {Supervisor: F. Quaglia},
}

@MastersThesis{tPalm06,
  author  = {Palmieri, Roberto},
  school  = {Sapienza, University of Rome},
  title   = {MicroOpGen tool and developing extensions for DisSimulator, a simulator for PD32 educational-processor},
  year    = {2006},
  type    = {bathesis},
  comment = {Supervisor: B. Ciciani},
}

@PhdThesis{tSant03,
  author  = {Santoro, Andrea},
  school  = {Sapienza, University of Rome},
  title   = {Semi-Asynchronous Checkpointing for Optimistic Parallel Simulation},
  year    = {2003},
  type    = {phdthesis},
  comment = {Supervisor: B. Ciciani},
}

@PhdThesis{tQuag99,
  author   = {Quaglia, Francesco},
  school   = {Sapienza, University of Rome},
  title    = {Consistent Checkpointing in Distributed Computations: Theoretical Results and Protocols},
  year     = {1999},
  type     = {phdthesis},
  abstract = {This thesis is focused on the study of consistent checkpointing in distributed computations. The model of the computation is asynchronous. The investigated checkpointing approach is known as communication-induced. In this approach, processes of the distributed computation take checkpoints at their own pace (namely basic checkpoints) and some additional checkpoints (namely forced checkpoints) are induced by a lazy coordination scheme, in order to guarantee consistency of global checkpoints. The lazy coordination is realized by piggybacking control information on application messages. Upon the receipt of a message, the recipient process evaluates a predicate basing on the incoming control information and on its local context; if the predicate is evaluated to TRUE, a forced checkpoint is taken. The thesis reports both theoretical results on this issue and protocols derived from those results.},
  comment  = {Supervisor: B. Ciciani},
}

@PhdThesis{tRome99,
  author  = {Romero, Milton},
  school  = {Sapienza, University of Rome},
  title   = {Disparity/Motion Estimation for Stereoscopic Video Processing},
  year    = {1999},
  type    = {phdthesis},
  comment = {Supervisor: B. Ciciani},
}

@PhdThesis{tBatt98,
  author  = {Battaglini, Gianluca},
  school  = {Sapienza, University of Rome},
  title   = {Analysis of Manufacturing Yields Evaluation of VLSI/WSI Systems: Methods and Methodologies},
  year    = {1998},
  type    = {phdthesis},
  comment = {Supervisor: B. Ciciani},
}

@MastersThesis{tQuag95,
  author  = {Quaglia, Francesco},
  school  = {Sapienza, University of Rome},
  title   = {Passo ottimo del salvataggio dello stato nel tool SIMCOR},
  year    = {1995},
  type    = {mathesis},
  comment = {Supervisor: B. Ciciani},
}

@Comment{jabref-meta: databaseType:bibtex;}

@Comment{jabref-meta: fileDirectoryLatex-pellegrini-X1:/home/pellegrini/MEGA/Archivio Pubblicazioni;}
